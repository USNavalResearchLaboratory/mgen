<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="transform.xsl"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1/docbookx.dtd">
<article>
  <articleinfo>
    <title><inlinemediaobject>
        <imageobject>
          <imagedata fileref="mgenLogo.gif"/>
        </imageobject>
      </inlinemediaobject><inlinemediaobject>
        <imageobject>
          <imagedata fileref="drecLogo.gif"/>
        </imageobject>
      </inlinemediaobject>MGEN User's and Reference Guide Version 5.0</title>

    <titleabbrev>MGEN User's and Reference Guide</titleabbrev>

    <abstract>
      <para>The Multi-Generator (MGEN) is open source software by the <ulink
      url="http://www.nrl.navy.mil/">Naval Research Laboratory</ulink> (NRL)
      PROTocol Engineering Advanced Networking (PROTEAN) group which provides
      the ability to perform IP network performance tests and measurements
      using UDP and TCP IP traffic. The toolset generates real-time traffic
      patterns so that the network can be loaded in a variety of ways. The
      generated traffic can also be received and logged for analyses. Script
      files are used to drive the generated loading patterns over the course
      of time. These script files can be used to emulate the traffic patterns
      of unicast and/or multicast UDP and TCP IP applications. The tool set
      can be scripted to dynamically join and leave IP multicast groups. MGEN
      log data can be used to calculate performance statistics on throughput,
      packet loss rates, communication delay, and more. MGEN currently runs on
      various Unix-based (including MacOS X) and WIN32 platforms.</para>

      <para>The principal tool is the mgen program which can generate,
      receive, and log test traffic. This document provides information on
      mgen usage, message payload, and script and log file formats. Additional
      tools are available to facilitate automated script file creation and log
      file analyses.</para>
    </abstract>
  </articleinfo>

  <sect1 id="Quick_Link">
    <title>Quick Links</title>

    <para>The Multi-Generator (MGEN) is open source software by the <ulink
    url="http://www.nrl.navy.mil/">Naval Research Laboratory</ulink> (NRL)
    PROTocol Engineering Advanced Networking (PROTEAN) group which provides
    the ability to perform IP network performance tests and measurements using
    UDP and TCP IP traffic. The toolset generates real-time traffic patterns
    so that the network can be loaded in a variety of ways. The generated
    traffic can also be received and logged for analyses. Script files are
    used to drive the generated loading patterns over the course of time.
    These script files can be used to emulate the traffic patterns of unicast
    and/or multicast UDP and TCP IP applications. The tool set can be scripted
    to dynamically join and leave IP multicast groups. MGEN log data can be
    used to calculate performance statistics on throughput, packet loss rates,
    communication delay, and more. MGEN currently runs on various Unix-based
    (including MacOS X) and WIN32 platforms.</para>

    <para>The principal tool is the mgen program which can generate, receive,
    and log test traffic. This document provides information on mgen usage,
    message payload, and script and log file formats. Additional tools are
    available to facilitate automated script file creation and log file
    analyses.</para>

    <itemizedlist>
      <listitem>
        <para><link linkend="_Mgen_Usage">Mgen Usage</link></para>
      </listitem>

      <listitem>
        <para><link linkend="_MGEN_Script_Format">Mgen Script File
        Format</link></para>
      </listitem>

      <listitem>
        <para><link linkend="_MGEN_Log_File">Mgen Log File
        Format</link></para>
      </listitem>

      <listitem>
        <para><link linkend="_MGEN_Message_Payload">Mgen Message
        Payload</link></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://pf.itd.nrl.navy.mil/proteantools/trpr.html">TRPR Log File
        Analysis Program</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://pf.itd.nrl.navy.mil/proteantools/gpsLogger.html">gpsLogger
        GPS Utility</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="mgen-tech.html">Mgen Technical
        Documentation</ulink></para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="_Mgen_Usage">
    <title>Mgen Usage</title>

    <para>The mgen version 5.0 program must currently be launched from a
    command-line. In the future, a simple graphical user interface similar to
    that of mgen version 3.x will be provided to simplify management of
    multiple sender and receiver instances. To launch mgen use the following
    command-line syntax:</para>

    <programlisting>mgen [ipv4][ipv6][input &lt;scriptFile&gt;][save &lt;saveFile&gt;]
     [output &lt;logFile&gt;][log &lt;logFile&gt;]
     [binary][txlog][nolog][flush][hostAddr {on|off}]
     [event "&lt;mgen event&gt;"][port &lt;recvPortList&gt;]
     [instance &lt;name&gt;][command &lt;cmdInput&gt;]
     [sink &lt;sinkFile&gt;][block][source &lt;sourceFile&gt;]
     [interface &lt;interfaceName&gt;][ttl &lt;multicastTimeToLive&gt;]
     [unicast_ttl &lt;unicastTimeToLive&gt;]
     [tos &lt;typeOfService&gt;][label &lt;value&gt;]
     [txbuffer &lt;txSocketBufferSize&gt;]
     [rxbuffer &lt;rxSocketBufferSize&gt;]
     [start &lt;hr:min:sec&gt;[GMT]][offset &lt;sec&gt;]
     [precise {on|off}][ifinfo &lt;ifName&gt;]
     [txcheck][rxcheck][check][stop]
     [convert &lt;binaryLog&gt;][debug &lt;debugLevel&gt;]
     [localtime &lt;localtime&gt;] [queue &lt;queue&gt;]
     [broadcast {on|off}] [logdata {on|off}]
     [loggpsdata {on|off}] [gpsfile &lt;fileName&gt;]
     [df {on|off}]

</programlisting>

    <sect2 id="Example_Usage">
      <title>Example Usage</title>

      <para>To run mgen with script file "script.mgn" and log to stdout (by
      default):<literal/></para>

      <para><literal>mgen input script.mgn</literal></para>

      <para>To monitor ports 5000,5004,5005, and 5006 for received UDP traffic
      and log to a specific file "log.drc":<literal/></para>

      <para><literal>mgen port 5000,5004-5006 output log.drc</literal></para>

      <para>The "event" command can be used to achieve equivalent operation
      with the command-line syntax:<literal/></para>

      <para><literal>mgen event "listen udp 5000,5004-5006" output
      log.drc</literal></para>

      <para>The "event" command allows for use of mgen without script files
      for "quick and dirty" runs. In the future, MGEN will be capable of being
      dynamically scripted during run time with "event" commands passed to
      MGEN via inter-process communication.</para>

      <para><emphasis>Note: In previous versions, two different programs (each
      with different scripts) were used to separately generate and receive
      test traffic. The traffic generation capability of the former mgen
      program and the receive-side functionality of the Dynamic-Receiver
      (drec) program have now been integrated into a single executable mgen
      program.</emphasis></para>

      <para>The file extensions ".mgn" for MGEN scripts and ".drc" for MGEN
      log files are suggested conventions that users might wish to use for
      consistency. The ".drc" naming is in honor of the deprecated drec
      program.</para>

      <para>The "sink" and "source" commands can be used to stream MGEN
      messages via alternative transport processes (e.g. reliable multicast,
      ssh, peer-to-peer protocols, etc). Here is an example using ssh to set
      up a TCP connection to a remote machine, start an mgen receiver at the
      remote machine to log receive messages, and attempt to transmit a 2 Mbps
      stream of MGEN messages via the ssh connection:<literal/></para>

      <para><literal>mgen event "ON 1 SINK DST 127.0.0.1/5001 PERIODIC [200
      1250]" \ sink STDOUT output /dev/null | ssh &lt;remoteHost&gt; sh -c
      "cat | \ mgen source STDIN output mgenLog.drc"</literal></para>

      <para>Note that the mgen executable must be present on the remote
      machine. Also note the importance of directing the MGEN sender's log
      output to /dev/null so that it doesn't get piped to the ssh process,
      mixed with the binary "sink" message stream.</para>
    </sect2>

    <sect2 id="_MGEN_Log_Format">
      <title>Example Script</title>

      <para>Below is an example MGEN script which generates two "flows" of UDP
      traffic and sends a single 1 megabyte TCP message. In this example, UDP
      flow 1 is sent to the loopback interface address (127.0.0.1) port 5001
      and UDP flow 2 is sent to an IP multicast group on port number 5002.
      Flow 3 will send a 1 megabyte tcp "message" as it is turned off
      immediately after being started. (Note that the targeted TCP server must
      be listening for tcp connections on the port specified). Locally, a
      LISTEN command is used to monitor these (and other) ports so that mgen
      can receive its own traffic for demonstration purposes. This script
      illustrates the usage of a number of MGEN script
      commands.<literal/></para>

      <programlisting># MGEN script begins here
# These are some "Transmission Event" script lines

# Originate two UDP flows

0.0 ON 1 UDP SRC 5001 DST 127.0.0.1/5001 PERIODIC [1 1024]
0.0 ON 2 UDP SRC 5002 DST 224.225.1.2/5002 PERIODIC [1 512]

# These script lines send a single 1 megabyte TCP mgen message
# Note that the "mgen message" will be received in multiple
# "mgen fragments" by the target node.

0.0 ON 1 TCP DST 10.0.0.1/5000 PERIODIC [1 1048576] COUNT 1

# Modify the pattern/rate of flow 2 4 seconds into the test

4.0 MOD 2 POISSON [10 1024]

# These are some "Reception Event" script lines
# Monitor some ports for UDP traffic

0.0 LISTEN UDP 5000-5002,6000,6003

# Join an IP multicast group
0.0 JOIN 224.225.1.2 INTERFACE eth0

# Join a SSM multicast group (Supported only for *nix)
#0.0 JOIN 232.1.1.1 SRC 25.25.25.1 INTERFACE eth0

# For WIN32, use the "PORT" option
0.0 JOIN 224.225.1.2 PORT 5002

# For OSX use the "interface" option if a default multicast route is not defined
#0.0 JOIN 224.1.2.3 interface en0

# Join a multicast group across a range of ports
0.0 JOIN 224.1.2.5 PORT 5005-5010

# On IPv6 systems set the port option when IPv4 group membership is requested
0.0 JOIN 224.1.2.4 port 5001

# Later, leave the group
5.0 LEAVE 224.225.1.2 INTERFACE eth0

# This SSM LEAVE is for UNIX (Currently SSM is supported only in UNIX)
#5.0 LEAVE 224.224.1.2 SRC 25.25.25.1 INTERFACE eth0

# Incrementally ignore some receive traffic
6.0 IGNORE UDP 5000-500
18.0 IGNORE UDP 5001,6000,6003

# More MGEN lines (terminate the flows)
10.0 OFF 
110.0 OFF 2

# MGEN script ends here</programlisting>
    </sect2>
  </sect1>

  <sect1 id="Command-line_Options">
    <title>Command-line Options</title>

    <para>Some of these command-line options can also be included in MGEN
    script files as "global" commands or defaults. Note the command-line (or
    commands sent via MGEN's remote control interface) will always override
    settings from script files.</para>

    <informaltable>
      <tgroup cols="2">
        <colspec colwidth="48*"/>

        <colspec colwidth="52*"/>

        <tbody>
          <row>
            <entry><literal><link id="_IPV4"
            linkend="_IPV4">ipv4</link></literal></entry>

            <entry>Forces mgen to open sockets for IPv4 operation (i.e.
            AF_INET domain sockets) only. The default behavior for mgen is to
            open sockets with the domain based on environment and the type of
            IP addresses used in the script file used.</entry>
          </row>

          <row>
            <entry><literal><link id="_IPV6"
            linkend="_IPV6">ipv6</link></literal></entry>

            <entry>Forces mgen to open sockets for IPv6 operation (i.e.
            AF_INET6 domain sockets) only. The default behavior for mgen is to
            open sockets with the domain based on environment and the type of
            IP addresses used in the script file used.</entry>
          </row>

          <row>
            <entry><literal><link id="_DF"
            linkend="_IPV6">df</link></literal></entry>

            <entry>Controls whether the DF fragmentation bit is set.
            {ON|OFF}</entry>
          </row>

          <row>
            <entry><literal>input&lt;scriptFile&gt;</literal></entry>

            <entry>Causes mgen to parse the given &lt;scriptFile&gt; at
            startup and schedule any transmission or reception events given in
            the script.</entry>
          </row>

          <row>
            <entry><literal>save&lt;saveFile&gt;</literal></entry>

            <entry>Causes mgen to save the sequence number state of any
            pending transmit flows and the current relative script "offset"
            time to &lt;saveFile&gt; in the form of an MGEN script. The
            &lt;saveFile&gt; may be used as an additional input script on a
            subsequent launch of mgento return mgen to the same state as when
            previously exited. See the equivalent global <link
            linkend="_SAVE">SAVE</link> command for further detail on
            usage.</entry>
          </row>

          <row>
            <entry><literal>output&lt;logFile&gt;</literal></entry>

            <entry>Cause mgen to output logged information to the indicated
            &lt;logFile&gt;. By default, mgen will log to stdout. With the
            output command, an existing &lt;logFile&gt; of the same name will
            be overwritten. Use the log command to append to an existing log
            file.</entry>
          </row>

          <row>
            <entry><literal>log&lt;logFile&gt;</literal></entry>

            <entry>This is the same as the output command except that if
            &lt;logFile&gt; already exists, it will be appended instead of
            replaced.</entry>
          </row>

          <row>
            <entry><literal>binary</literal></entry>

            <entry>Causes mgen to save output logging information in a
            smaller-sized binary file format. This option should come before
            the output or log command.</entry>
          </row>

          <row>
            <entry><literal>txlog</literal></entry>

            <entry>This enables transmission logging. This results in <link
            linkend="_Log_File_SEND_Events">SEND</link> events being added to
            the log file every time a packet is sent by mgen.</entry>
          </row>

          <row>
            <entry><literal>nolog</literal></entry>

            <entry>This disables logging completely.</entry>
          </row>

          <row>
            <entry><literal>flush</literal></entry>

            <entry>This causes the output log file to be flushed with each
            line written. This is useful for real-time monitoring of MGEN
            logging</entry>
          </row>

          <row>
            <entry><literal>hostAddr {on|off}</literal></entry>

            <entry>Turning this option on causes mgen to include the "host"
            field in MGEN messages sent. The "host" field contains an educated
            guess of the machines local IP address to help identify the source
            of messages in log files. When the "host" field is present, MGEN
            log file SEND and RECV events contain a "host&gt;" field
            indicating the sender's original address. This can be useful when
            Network Address Translation (NAT) or other tunneling occurs in
            test networks.</entry>
          </row>

          <row>
            <entry><literal>event"&lt;mgen event&gt;"</literal></entry>

            <entry>The event command allows the user to enter the equivalent
            of MGEN script lines into mgen via the command-line. Multiple
            event commands can be used to pass the equivalent of a multi-line
            script to MGEN. Note that MGEN script events generally contain
            spaces and thus must be encapsulated in quotes on the command
            line. Note that the &lt;eventTime&gt; may be omitted and the
            action indicated will be taken by mgen immediately. When the
            <para><emphasis/></para><para><emphasis>event</emphasis></para>command
            is issued during run-time, the &lt;eventTime&gt; (if provided)
            specifies a delay relative to the current time (e.g. the event
            will occur with after the given delay).</entry>
          </row>

          <row>
            <entry><literal>instance&lt;instanceName&gt;</literal></entry>

            <entry>If a pre-existing mgen application instance is _not_
            already running, this command registers the running mgen program
            as an instance identified by the &lt;instanceName&gt;. On UNIX,
            this corresponds to a Unix-domain datagram socket named
            "/tmp/&lt;instanceName&gt;" being opened and monitored for MGEN
            commands (On WIN32, a "mailslot" named
            "\\.\mailslot\&lt;instanceName&gt;" is created and used). These
            interprocess channels allow for run-time control of mgen
            processes. This is the preferred methodology for run-time control
            of the mgen application.If an application instance as identified
            by the &lt;instanceName&gt; parameter is already running, any
            subsequent command-line options are transmitted to the remote
            instance already running, and the new mgen instance will then
            exit.This allows run-time control of possibly multiple background
            mgeninstances from the "shell" or via scripting. The
            <emphasis>event</emphasis> command may be used to dispatch MGEN
            script events to mgen instances at run-time.</entry>
          </row>

          <row>
            <entry><literal>command{&lt;path&gt;|STDIN}</literal></entry>

            <entry>This specifies a file or device which mgen will monitor for
            run-time command input. If the "STDIN" key is used, mgenmonitors
            the "stdin" (console) input which can provide a crude run-time
            user interface for mgen. Commands sent to mgen in this fashion
            must be delimited by line-breaks or the ';' character. See the
            instance command for a more flexible, and the preferred option for
            mgen run-time control.</entry>
          </row>

          <row>
            <entry><literal>port&lt;recvPortList&gt;</literal></entry>

            <entry>Causes mgen to monitor the given port numbers for received
            UDP traffic. The format of the &lt;recvPortList&gt; is a
            comma-delimited list of individual or inclusive ranges of port
            values (No spaces allowed in the list). Note this is the
            equivalent of a scripted <para/><para>0.0 LISTEN UDP
            &lt;recvPortList&gt;</para>reception event and can also be
            equivalently achieved with the
            <para><emphasis>event</emphasis></para> command using the
            syntax:<para/><literal> <literal>mgen event "LISTEN UDP
            &lt;portList&gt;"Example:mgen port
            5000,5002,5005-5009</literal></literal></entry>
          </row>

          <row>
            <entry><literal>sink&lt;sinkFile&gt;</literal></entry>

            <entry>Causes mgento use the file or device (e.g. stdout)
            indicated as a "sink" or destination for transmitted message flows
            of protocol type "SINK". I.e., MGEN message flows of type "SINK"
            are written to the "sink" device instead of to a UDP or TCP
            socket. Piping mgen output to stdout allows MGEN messages to use
            alternative transport provided by another process (e.g. ssh,
            <ulink url="http://cs.itd.nrl.navy.mil/work/norm/">norm</ulink>,
            etc). The special &lt;sinkFile&gt; value "STDOUT" will direct MGEN
            SINK flows to the mgen process stdout.</entry>
          </row>

          <row>
            <entry><literal>source&lt;sourceFile&gt;</literal></entry>

            <entry>This is the complement to the
            <para><emphasis>sink</emphasis></para>command. This allows mgen to
            directly receive a binary stream of MGEN messaging from the
            &lt;sourceFile&gt; which may be the piped stdoutfrom another
            process (e.g. ssh, <ulink
            url="http://cs.itd.nrl.navy.mil/wowrk/norm">norm</ulink>, etc).
            The special &lt;sourceFile&gt; string "STDIN" causes mgen to get
            input from its stdin stream. Messages read from the
            &lt;sourceFile&gt; (or stream) are time-stamped and logged in the
            MGEN log file as usual.</entry>
          </row>

          <row>
            <entry><literal>start&lt;hr:min:sec&gt;[GMT]</literal></entry>

            <entry>Causes mgen to delay processing events in script file
            relative to the indicated absolute time. The optional "GMT"
            keyword indicates the time is Greenwich Mean Time instead of the
            default local time. This command establishes an absolute time for
            the relative script time of 0.0 seconds.</entry>
          </row>

          <row>
            <entry><literal>offset&lt;sec&gt;</literal></entry>

            <entry>Causes mgen to skip &lt;sec&gt; seconds of relative time
            into the execution of the script file used. Note that if an
            absolute start time is given using the <literal>start
            command,</literal> the offset into the script will correspond to
            that absolute time. The default offset for MGEN is 0.0
            seconds.</entry>
          </row>

          <row>
            <entry><literal>precise{on|off}</literal></entry>

            <entry>When the precise mode is enable, mgen performs polling
            (only as needed) to precisely time packet transmission. While this
            is sometimes helpful at high packet transmission rates, it comes
            at a cost of high CPU utilization by mgen. The default for this
            option is "off".</entry>
          </row>

          <row>
            <entry><literal>ifinfo&lt;interfaceName&gt;</literal></entry>

            <entry>This option can be used to have MGEN print a summary of
            statistics to stderr upon exit for the specified network
            interface. These stats include counts of frames sent/received.
            This can be used to augment/verify MGEN performance with or
            without logging enabled</entry>
          </row>

          <row>
            <entry><literal>convert&lt;binaryLogFile&gt;</literal></entry>

            <entry>Causes mgen to convert the indicated &lt;binaryLogFile&gt;
            to a text-based log file. The text-based log file information will
            be directed to stdout unless you specify a filename with the
            <emphasis>output</emphasis> or <emphasis>log</emphasis> command.
            Mgen will exit after the file conversion is complete.</entry>
          </row>

          <row>
            <entry><literal>interface&lt;interfaceName&gt;</literal></entry>

            <entry>Causes mgen to set the default network interface for IP
            multicast and/or root node flow transmission to
            &lt;interfaceName&gt;. &lt;interfaceName&gt; will override any
            default interface specified within an mgenscript file.
            &lt;interfaceName&gt; is a "per socket" attribute, and in its
            absence, MGEN will behave according to the operating system's
            default behavior.</entry>
          </row>

          <row>
            <entry><literal>ttl &lt;multicastTimeToLive&gt;</literal></entry>

            <entry>Causes mgen to set the hop count for IP multicast traffic
            generated by MGEN. &lt;multicastTimeToLive&gt; will override any
            default multicast ttl indicated within an mgen script file.
            &lt;timeToLive&gt; is a "per socket" attribute. If no ttl option
            is used, MGEN will set the default multicast ttl to 1.</entry>
          </row>

          <row>
            <entry><literal>unicast_ttl
            &lt;unicastTimeToLive&gt;</literal></entry>

            <entry>Causes mgen to set the hop count for IP unicast traffic
            generated by MGEN. &lt;unicastTimeToLive&gt; will override any
            default unicast ttl indicated within an mgen script file.
            &lt;unicastTimeToLive&gt; is a "per socket" attribute. If no
            unicast_ttl option is used, MGEN will set the default unicast ttl
            to 255.</entry>
          </row>

          <row>
            <entry><literal>tos&lt;typeOfService&gt;</literal></entry>

            <entry>Causes mgen to set the IPv4 type-of-service field (within
            the packet header) to &lt;typeOfService&gt;. &lt;typeOfService&gt;
            will override any default tos indicated within an mgen script
            file. As with ttl and interface, tos is a "per socket" attribute.
            If no tos option is used, MGEN will behave according to the
            operating system's default behavior.</entry>
          </row>

          <row>
            <entry><literal>label&lt;value&gt;</literal></entry>

            <entry>Causes mgen to set &lt;value&gt; as the
            <para><emphasis>default</emphasis></para> flow label for IPv6
            flows. The &lt;value&gt; corresponds to the 28-bit IPv6 flow label
            field and may be specified in decimal or hex.</entry>
          </row>

          <row>
            <entry><literal>txbuffer&lt;bufferSize&gt;</literal></entry>

            <entry>Causes mgen to set the socket transmit buffer size to a
            value ?at least? as large as &lt;bufferSize&gt;. If
            &lt;bufferSize&gt; is larger that the maximum allowed by the
            system, &lt;bufferSize&gt; will be set to the system
            maximum.</entry>
          </row>

          <row>
            <entry><literal>rxbuffer&lt;bufferSize&gt;</literal></entry>

            <entry>Causes mgento set the socket receive buffer size to a value
            ?at least? as large as &lt;bufferSize&gt;. If &lt;bufferSize&gt;
            is larger that the maximum allowed by the system,
            &lt;bufferSize&gt; will be set to the system maximum.</entry>
          </row>

          <row>
            <entry><literal>txcheck</literal></entry>

            <entry>Causes mgen to include an optional 32-bit cyclic redundancy
            checksum (CRC) at the end of its messages. The
            <literal>CHECKSUM</literal> flag is set to indicate the presence
            of the checksum content.</entry>
          </row>

          <row>
            <entry><literal>rxcheck</literal></entry>

            <entry>Forces mgen receivers to validate the checksum portion
            (last 4 bytes) of MGEN messages whether or not the CHECKSUM flag
            is set in the MGEN "flags" message field. Use this option when it
            is _known_ that the MGEN sender is supplying checksums to cover
            the case when the "flags" field itself is possibly
            corrupted.</entry>
          </row>

          <row>
            <entry><literal>check</literal></entry>

            <entry>Sets mgen behavior as if both the
            <emphasis>txcheck</emphasis> _and_ <emphasis>rxcheck</emphasis>
            commands were applied. This is the recommended option when MGEN
            checksum operation is desired so that both senders and receivers
            are providing and validating checksums, respectively.</entry>
          </row>

          <row>
            <entry><literal>stop</literal></entry>

            <entry>This command causes mgen to exit. This is useful for
            run-time control of mgen instances.</entry>
          </row>

          <row>
            <entry><literal>localtime</literal></entry>

            <entry>This enables logging of events and error messages in
            localtime. By default, events are logged in Greenwich Mean
            Time.</entry>
          </row>

          <row>
            <entry><literal>queue&lt;queueSize&gt;</literal></entry>

            <entry>This global command will cause mgen to buffer
            &lt;queueSize&gt; mgen packets for each flow during periods of
            congestion. (Note that flow specific limits specified at the
            transmission event level will override this global). When the
            number of pending messages for a flow exceeds this limit, the
            message transmission timer will be temporarily deactivated and any
            pending messages will transmitted as quickly as possible. The
            timer will be reactivated once the pending message count falls
            below the queue limit, and message transmission will return to the
            previously scheduled rate of transmission. If no global command is
            specified, a default &lt;queueSize&gt; of "0" will be in effect
            which will result in no queuing behavior, e.g. the transmission
            timer will continue to fire at its regularly scheduled interval
            regardless of transport congestion. No pending message count will
            be accumulated and message transmission will suceed or fail
            depending on transport availability. See <link
            linkend="_QUEUE">QUEUE</link> for more details about the queueing
            mechanism.</entry>
          </row>

          <row>
            <entry><literal>broadcast {on|off}</literal></entry>

            <entry>Causes MGEN to set the socket option SO_BROADCAST to allow
            or disallow sending (and sometimes receiving) broadcasts from the
            socket. As with tos, ttl and interface, broadcast is a "per
            socket" attribute. By default BROADCAST is set to ON.</entry>
          </row>

          <row>
            <entry><literal>logdata {on|off}</literal></entry>

            <entry>Controls whether MGEN will log the optional data attribute
            field at MGEN receivers (including within MGEN binary log files).
            It does not affect whether MGEN senders send the requested data
            attribute. By default LOGDATA is set to ON.</entry>
          </row>

          <row>
            <entry><literal>loggpsdata {on|off}</literal></entry>

            <entry>Controls whether MGEN will log the gps data fields at MGEN
            receivers. It does not affect whether MGEN senders send the GPS
            data. By default LOGGPSDATA is set to ON. Note that as opposed to
            the logdata attribute, GPS data will be saved in any interim
            binary log file regardless of this flag. This flag only controls
            whether the gps data is logged in the formatted log files.</entry>
          </row>

          <row>
            <entry><literal>boost</literal></entry>

            <entry>The boost option sets the mgen process to realtime process
            priority. Care should be taken using the "precise" and "boost"
            options together as the mgen process can take over a machine at
            high packet rates (e.g. ctrl-c may not be handled).</entry>
          </row>

          <row>
            <entry><literal>gpsfile &lt;gpsFile&gt;</literal></entry>

            <entry>Changes the default location of the gps shared memory file
            to &lt;gpsFile&gt;</entry>
          </row>

          <row>
            <entry><literal>df {on|off}</literal></entry>

            <entry>Controls whether the df fragmentation bit is set for the
            flow.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>

  <sect1 id="MGEN_Run-Time_Remote_Control">
    <title>MGEN Run-Time Remote Control</title>

    <para>To use the mgen "remote control interface":</para>

    <orderedlist>
      <listitem>
        <para>Start one (or more) instance(s) of mgen to control:</para>

        <para><literal>mgen instance mgen1</literal></para>
      </listitem>

      <listitem>
        <para>Subsequent invocations of mgen with the same instance name will
        pass provided commands to the first instance and then exit:</para>

        <para><literal>mgen instance mgen1 event "on 1 udp dst 127.0.0.1/5000
        periodic [1 1024]"</literal></para>
      </listitem>
    </orderedlist>

    <para>The second instance (Step #2) will exit after it has passed its
    commands to the first running instance as identified by the
    &lt;instanceName&gt;. Note this can allow run-time control of multiple
    mgen instances by user(s), shell scripts, or other processes. A programmer
    comfortable with use of Unix-domain sockets (or WIN32 mailslots) or using
    the NRL Protolib "ProtoPipe" C++ class can also write software for
    run-time control of MGEN processes.</para>
  </sect1>

  <sect1 id="_MGEN_Script_Format">
    <title>MGEN Script Format</title>

    <para>MGEN scripts are text files containing a sequence of commands and
    scheduled events describing traffic generation patterns, ports and/or
    multicast groups to be monitored, and other options. Each line in the
    script corresponds to either a "<link
    linkend="_Transmission_Events">Transmission Event</link>", or "<link
    linkend="_Reception_Events">Reception Event</link>", or "<link
    linkend="_Global_Commands">Global Command</link>". Lengthy script lines
    can be continued to multiple text file lines by using a trailing backslash
    '\' character at the end of the line. Additionally, blank lines are
    permitted and comment lines can be included by providing a leading '#'
    character at the beginning of lines. (Note comment lines cannot be
    inserted in between "continued" script lines). Currently mgen is
    case-sensitive in parsing the script file format (commands, options, etc
    are all upper case), but will be modified to be case-insensitive in the
    future.</para>

    <para>Scheduled transmission and reception events in the script use lines
    in the format of:<literal/></para>

    <para><literal>[&lt;eventTime&gt;] &lt;eventType&gt; &lt;parameters
    ...&gt; [&lt;options ...&gt;]</literal></para>

    <para>These "events" are scheduled to be executed by MGEN at the relative
    time given by the &lt;eventTime&gt; field. The value of this field is a
    floating point number which denotes the relative time (in seconds) of the
    associated event. The time is relative to the start of the MGEN program or
    the time dictated by the global START command. If the &lt;eventTime&gt; is
    omitted, an &lt;eventTime&gt; of 0.0 (or immediately if MGEN is already
    started) is assumed (This can used with MGEN's "event" command to directly
    control the operation of ns-2 Agent/MGEN instances within an ns-2 TCL
    (Tool Command Language) script without use of an external MGEN
    script.</para>

    <para>Global commands are generally used to define default behaviors for
    MGEN operation or other options independent of event scheduling. The
    format for global command script lines is:<literal/></para>

    <para><literal>&lt;commandType&gt; [&lt;command parameters
    ...&gt;]</literal></para>

    <sect2 id="_Transmission_Events">
      <title>Transmission Events</title>

      <para>MGEN "Transmission Event" script lines are used to schedule and
      characterize mgen traffic generation. An instance of mgen can
      simultaneously transmit traffic to multiple destinations with different
      patterns of transmission. The MGEN script format uses "flow identifiers"
      (&lt;flowIds&gt;) to tag specific "threads" of MGEN traffic generation.
      While the &lt;flowIds&gt; are placed in the payload of associated MGEN
      messages, the primary purpose of the &lt;flowId&gt; is to simply tie
      together a sequence of script "transmission events" as a single "flow"
      or "thread".</para>

      <para>The sequence of events pertaining to a "flow" of MGEN traffic
      generation consist of <link linkend="_ON_Event">ON</link>, <link
      linkend="_MOD_Event">MOD</link>, and <link
      linkend="_OFF_Event">OFF</link> . The script line syntax for these event
      types is:</para>

      <para><literal>&lt;eventTime&gt; {ON|MOD|OFF} &lt;flowId&gt;
      [&lt;options ...&gt;]</literal></para>

      <para><literal/>The first scripted event for a given flow identified by
      a &lt;flowId&gt; must be an <link linkend="_ON_Event">ON</link> event.
      Subsequently, <link linkend="_MOD_Event">MOD</link>, events can be used
      to modify characteristics of the given flow until it is terminated with
      an <link linkend="_OFF_Event">OFF</link> event. After a flow has been
      terminated with the <link linkend="_OFF_Event">OFF</link> command, a
      flow with the same &lt;flowId&gt; value may be initiated with another
      <link linkend="_ON_Event">ON</link> event. The &lt;options&gt; fields
      are used to describe the characteristics of flows initiated with <link
      linkend="_ON_Event">ON</link> events and modified with subsequence MOD
      events. The <link linkend="_OFF_Event">OFF</link> event uses no
      options.</para>

      <sect3 id="_ON_Event">
        <title>ON Event</title>

        <para>Script syntax:<literal/></para>

        <para><literal>&lt;eventTime&gt; ON &lt;flowId&gt; &lt;protocol&gt;
        [connect] DST &lt;addr&gt;/&lt;port&gt; &lt;pattern [params]&gt;
        [&lt;options ...&gt;] [DATA [&lt;hex&gt;&lt;hex&gt;]]</literal></para>

        <para>This transmission event type is used to initiate a new flow at
        the time given by the &lt;eventTime&gt;. The &lt;flowId&gt; is used to
        identify the flow within the script and can be used by subsequent
        <link linkend="_MOD_Event">MOD</link>, or <link
        linkend="_OFF_Event">OFF</link> events to reference the flow initiated
        here.</para>

        <para>The &lt;protocol&gt; field indicates the transport protocol to
        be used for the generated MGEN test messages. Current supported
        &lt;protocol&gt; types include "UDP", "TCP", and "SINK". The flow
        destination address and port must be specified for the <link
        linkend="_ON_Event">ON</link> event using the DST option and the
        &lt;pattern&gt; of message generation must be given as well. Other
        flow &lt;options&gt; may be specified to further characterize the
        flow. User defined message payload can be specified with the DATA
        command. The data should be a hexadecimal representation of the user
        data where each pair of characters corresponds to one byte of user
        data.</para>

        <para>The "UDP" and "TCP" protocol types encapsulate generated MGEN
        messages for the flow into IP packets for the appropriate protocol and
        transmit them over the network. (Note that an mgen instance must be
        "listening" for a TCP connection on the destination port at the target
        node or the connection attempt will fail and the flow will be turned
        off). Messages for the "SINK" protocol type are written to the
        file/device/stream indicated by the mgen "sink" command-line option.
        In the future, other protocol types will be available for MGEN traffic
        flows.</para>

        <para>The optional UDP CONNECT attribute will direct MGEN to open a
        "connected" UDP socket. If the connection cannot be established or is
        not available for a time period, MGEN will continue to attempt to send
        packets until the flow is stopped. (Note that Windows and some Unix
        implementations may not always report IGMP port unreachable messages
        returned by the destination address when a socket is not listening to
        the requested port.)</para>

        <para>Example:</para>

        <para>This script line will originate a "flow" of MGEN UDP destined
        for the loopback address (IP address 127.0.0.1) port number 5000
        beginning immediately when the script is executed. The messages will
        consist of 1024 byte messages at a regular rate of 1.0 per
        second:<literal/></para>

        <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 PERIODIC [1.0
        1024]</literal></para>
      </sect3>

      <sect3 id="_MOD_Event">
        <title>MOD Event</title>

        <para>Script syntax:<literal/></para>

        <para><literal>&lt;eventTime&gt; MOD &lt;flowId&gt; [&lt;options
        ...&gt;]</literal></para>

        <para>This transmission event type is used to modify the
        characteristics of an existing flow identified by the &lt;flowId&gt;
        field. The given transmission event &lt;options&gt; determine which
        specific characteristics of the flow (e.g. PATTERN, TOS, destination
        (DST), connection status (CONNECT), broadcast, etc) will be affected.
        Multiple options may be specified in the script line. Note that the
        protocol type and source port number (SRC) cannot be changed with the
        MOD event type (the referenced flow should be terminated with an <link
        linkend="_OFF_Event">OFF</link> event and re-initiated with an <link
        linkend="_ON_Event">ON</link> event to accomplish this goal). If no
        &lt;options&gt;are given, the flow will remain unaltered. A script
        parse error will result if the identified flow was not previously
        initiated with an <link linkend="_ON_Event">ON</link>event.</para>

        <para>Example:</para>

        <para>This script line will modify "flow 1" to change it packet
        transmission pattern 5.0 seconds after script execution. The changed
        "flow 1" will then generate messages 512 bytes in size at an average
        rate of 10.0 messages per second following a Poisson
        (exponentially-distributed interval)<literal/></para>

        <para><literal>5.0 MOD 1 POISSON [10.0 512]</literal></para>

        <para><literal>Example:</literal></para>

        <para><literal>These commands will connect a previously unconnected
        UDP socket. Note that the original socket will be closed and any
        pending queue for the flow will be cleared.</literal></para>

        <para><literal>ON 1 UDP SRC 5000 DST 10.0.0.1/5001 PERIODIC [1
        1024]</literal></para>

        <para><literal>5.0 MOD 1 CONNECT </literal></para>

        <para><literal>Example:</literal></para>

        <para><literal>These commands will disconnect a previously connected
        socket and change the source port to 5001. To keep the socket
        connected you must also specify the CONNECT attribute on the MOD
        command.</literal></para>

        <para><literal>ON 1 UDP CONNECT SRC 5000 DST 10.0.0.1/5001 PERIODIC [1
        1024]</literal></para>

        <para><literal>5.0 MOD 1 SRC 5001</literal></para>
      </sect3>

      <sect3 id="_OFF_Event">
        <title>OFF Event</title>

        <para>Script syntax:</para>

        <para><literal>&lt;eventTime&gt; OFF &lt;flowId&gt;</literal></para>

        <para>This transmission event type terminates message transmission for
        the flow identified by the &lt;flowId&gt; field at the time given in
        the &lt;eventTime&gt; field. There are no options applicable to this
        event type. A script parse error will result if the identified flow
        was not previously initiated with an <link
        linkend="_ON_Event">ON</link> event.</para>

        <para>Example:</para>

        <para>This script line will terminate generation of MGEN message
        traffic for "flow 1" at 10.0 seconds after script
        execution.<literal/></para>

        <para><literal>10.0 OFF 1</literal></para>
      </sect3>
    </sect2>

    <sect2 id="_Transmission_Event_Options">
      <title>Transmission Event Options</title>

      <para>This section describes options which may be applied to <link
      linkend="_ON_Event">ON</link> or <link linkend="_MOD_Event">MOD</link>,
      transmission events in MGEN script files. Note that <link
      linkend="_ON_Event">ON</link> event lines require specification of at
      least the &lt;protocol&gt;, &lt;destination&gt;, and &lt;pattern&gt;
      options, while only the options to be changed need to be specified as
      part of <link linkend="_MOD_Event">MOD</link> event lines.</para>

      <sect3 id="Protocol__UDP_TCP_SINK">
        <title>Protocol (UDP/TCP/SINK)</title>

        <para>Option syntax:</para>

        <para><literal>... &lt;protocolType&gt; ...</literal></para>

        <para>The transport protocol for MGEN messages generated by a flow
        must be specified as part of any <link linkend="_ON_Event">ON</link>
        events.</para>

        <para>Example:</para>

        <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 PERIODIC [1.0
        1024]</literal></para>

        <para><literal>0.0 ON 2 TCP DST 127.0.0.1/5000 PERIODIC [1.0
        1024]</literal></para>

        <para><literal>0.0 ON 3 SINK DST 127.0.0.1/5000 PERIODIC [1.0
        1024]</literal></para>
      </sect3>

      <sect3 id="Destination__DST">
        <title>Destination (DST)</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... DST &lt;addr&gt;/&lt;port&gt; ...</literal></para>

        <para>The destination address for a flow must be specified for <link
        linkend="_ON_Event">ON</link> events and may be altered as part of
        <link linkend="_MOD_Event">MOD</link>, events. The &lt;addr&gt; field
        specifies the destination IP address (IPv4 or IPv6) and the
        &lt;port&gt; field specifies the destination host port number. The
        destination address may be a unicast (point-to-point) or multicast
        address.</para>

        <para>Examples:<literal/></para>

        <para><literal>#Start a flow to loopback address port
        5000</literal></para>

        <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 PERIODIC [1.0
        1024]</literal></para>

        <para><literal>#Modify flow 1 to a different destination
        port</literal></para>

        <para><literal>0.0 MOD 1 DST 127.0.0.1/5001</literal></para>
      </sect3>

      <sect3 id="_Source_Port_SRC">
        <title>Source Port (SRC)</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... SRC &lt;port&gt; ...</literal></para>

        <para>The source port number used for generated traffic may be
        optionally specified as part of an <link linkend="_ON_Event">ON</link>
        event. The &lt;port&gt; field identifies the host port number to be
        used. When the SRC option is not specified or set to "0", the flow
        will use a free port number picked by the operating system. Note that
        MGEN UDP flows may share the same source port and the associated flow
        will "inherit" some attributes (e.g.<link
        linkend="_Type-Of-Service_TOS">TOS</link>, <link
        linkend="_Time-To-Live_TTL">TTL</link>, <link
        linkend="_Broadcast">BROADCAST</link> etc) which may have been set for
        other flows which use that same source port. This is because some of
        these attributes tend to be maintained by operating systems on a "per
        socket" basis. Also, any such attributes set for this flow will affect
        other existing flows using the same source port. Thus, the SRC option
        is useful when it is desired to explicitly create different flows with
        distinct "per socket" attributes such as <link
        linkend="_Type-Of-Service_TOS">TOS</link> or <link
        linkend="_Time-To-Live_TTL">TTL</link>.</para>

        <para>NOTE: Under the windows operating system, the ability to
        reestablish TCP connections to a common SRC addr/port DST addr/port
        pair is limited by TCP's TIME_WAIT interval which can range from 2
        minutes to 30 seconds. During this operating system dependent
        interval, any attempt to reuse the socket pair will fail. Allowing the
        operating system to provide the SRC port will allow connections to a
        common dst/port to be successful within this interval. This behavior
        may also manifest under certain Linux distributions as well.</para>

        <para>Example:</para>

        <para>Here, two flows are created with the same destination address,
        but different source ports. Flow 1 is also assigned non-default
        type-of-service using the TOS option. The use of the SRC option
        ensures that two different sockets are used to support the two
        different types of service.<literal/></para>

        <para><literal>#Start flow 1 using source port 5001(TOS = 0x10) and
        flow 2 using port 5002</literal></para>

        <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 SRC 5001 PERIODIC [1.0
        1024] TOS 0x10</literal></para>

        <para><literal>0.0 ON 2 UDP DST 127.0.0.1/5000 SRC 5002 PERIODIC [10.0
        512]</literal></para>
      </sect3>

      <sect3 id="_COUNT">
        <title>COUNT</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... COUNT &lt;msgCount&gt; ...</literal></para>

        <para>The optional COUNT attribute specifies the number of messages
        that are to be sent for the flow, e.g. a COUNT value of 1 means that
        one and only one mgen message will be sent. This attribute defaults to
        "-1", meaning mgen will send an unlimited number of messages until an
        <link linkend="_OFF_Event">OFF</link> event occurs or the mgen program
        completes. If a message count is specified, the mgen flow will be
        stopped after the requested number of messages has been sent.</para>

        <para>Note that an <link linkend="_OFF_Event">OFF</link> event will
        override any message COUNT specified (e.g. the flow will be terminated
        even if &lt;msgCount&gt; messages have not been sent) and that the
        <link linkend="_QUEUE">QUEUE</link> attribute will override (defer)
        OFF events.</para>
      </sect3>

      <sect3 id="Pattern__PER">
        <title>Pattern (PERIODIC, POISSON, BURST, JITTER, CLONE)</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... &lt;patternType&gt; [parameters ...]
        ...</literal></para>

        <para>(Note: The '[' and ']' characters are explicitly required at the
        beginning and end of the pattern parameter set. Different pattern
        types may use different parameter sets.)</para>

        <para>Traffic generated by MGEN consists of a series of
        sequence-numbered messages. The messaging generated by MGEN may vary
        in size and frequency of transmission to stress the network in a
        controlled fashion or possibly emulate other network applications. The
        "Pattern" of message generation must be specified in ON events and may
        be altered as part of subsequent <link
        linkend="_MOD_Event">MOD</link>, events. Currently MGEN supports four
        pattern types, "PERIODIC", "POISSON", "BURST", "JITTER", and "CLONE".
        Complex traffic patterns can be created by using a compound of
        multiple "flows" (with the same SRC/DST) with different pattern types
        and parameters. Other pattern types (e.g. MARKOV), including ones with
        statistically varying payload sizes, will be added eventually.</para>

        <sect4 id="PERIODIC_Pattern">
          <title>PERIODIC Pattern:</title>

          <para>Option syntax:<literal/></para>

          <para><literal>... PERIODIC [&lt;rate&gt;
          &lt;size&gt;]...</literal></para>

          <para>This pattern type generates messages of a fixed &lt;size&gt;
          (in bytes) at a very regular &lt;rate&gt; (in messages/second). For
          UDP protocol, the &lt;size&gt; field must be greater or equal to the
          minimum MGEN message size and less than or equal to the maximum UDP
          message size of 8192 bytes. For TCP protocol, &lt;size&gt; parameter
          is unlimited. Note the &lt;rate&gt; must be greater than or equal to
          0.0 messages/second for the TCP and UDP protocols.</para>

          <para>Example:<literal/></para>

          <para><literal>#Start an MGEN flow sending 1024 byte
          messages</literal></para>

          <para><literal>#at a rate of 10.0 per second</literal></para>

          <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 PERIODIC [10.0
          1024]</literal></para>

          <para><literal>#Reduce the flow rate to one 512 byte
          message</literal></para>

          <para><literal>#every 2.0 seconds</literal></para>

          <para><literal>0.0 MOD 1 PERIODIC [0.5 512]</literal></para>
        </sect4>

        <sect4 id="POISSON_Pattern">
          <title>POISSON Pattern:</title>

          <para>Option syntax:<literal/></para>

          <para><literal>... POISSON [&lt;aveRate (msg/sec)&gt; &lt;size
          (bytes)&gt;] ...</literal></para>

          <para>This pattern type generates messages of a fixed &lt;size&gt;
          (in bytes) at statistically varying intervals at an average
          &lt;rate&gt; (in messages/second). For UDP protocol, the
          &lt;size&gt; field must be greater or equal to the minimum MGEN
          message size and less than or equal to the maximum UDP message size
          of 8192 bytes. For TCP protocol, &lt;size&gt; parameter is
          unlimited. Note the &lt;rate&gt; must be greater than or equal to
          0.0 messages/second for the TCP and UDP protocols.</para>

          <para>Example:<literal/></para>

          <para><literal>#Start an MGEN flow sending 1024 byte
          messages</literal></para>

          <para><literal>#at an average rate of 10.0 per
          second</literal></para>

          <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 POISSON [10.0
          1024]</literal></para>

          <para><literal>#Reduce the flow rate to an average of
          one</literal></para>

          <para><literal>#512 byte message every 2.0 seconds</literal></para>

          <para><literal>0.0 MOD 1 POISSON [0.5 512]</literal></para>
        </sect4>

        <sect4 id="BURST_Pattern">
          <title>BURST Pattern:</title>

          <para>Option syntax:<literal/></para>

          <para><literal>... BURST [REGULAR|RANDOM &lt;aveInterval (sec)&gt;
          &lt;patternType&gt; [&lt;patternParams&gt;] FIXED|EXPONENTIAL
          &lt;aveDuration (sec)&gt;] ...</literal></para>

          <para>The BURST pattern generates bursts of other MGEN pattern types
          at a specified average interval. The first parameter of the BURST
          pattern is either "REGULAR" resulting in periodic burst uniformly
          distributed in time by the &lt;aveInterval&gt; value, or "RANDOM"
          which exponentially distributes the traffic generation bursts in
          time with an average burst interval as specified by the
          &lt;aveInterval&gt; parameter value. The characteristics of the MGEN
          messages generated during a burst is given by the
          &lt;patternType&gt; and associated &lt;patternParams&gt; parameters.
          The &lt;patternType&gt; may any MGEN pattern type including
          PERIODIC, POISSON, or, yes, even BURST. The &lt;patternParams&gt;
          must be appropriate for the given &lt;patternType&gt;. When a
          traffic generation burst occurs, its duration is either of a FIXED
          value as given by the &lt;aveDuration&gt; or a randomly varying
          duration with EXPONENTIAL statistics and an average duration as
          given by the &lt;aveDuration&gt; parameter.</para>

          <para>An example use of the BURST pattern would be to roughly
          emulate the "talk spurts" which might result from Voice Over IP
          (VOIP) applications. As a voice conversation commences, a user's
          burst of activity (talk spurts) might be RANDOM with some average
          interval and the duration talk spurts approximate EXPONENTIAL
          statistics. &gt; When the talk spurt (burst) occurs, the voice
          compression codec might generate messages following something like a
          PERIODIC flow with packet rates and packet sizes dependent upon the
          voice codec in use.</para>

          <para>Other uses of the BURST pattern might be to roughly model
          message/packet generation occurring with random use of a network
          such as web browsing, etc. The BURST model provided by MGEN does not
          presuppose any specific traffic model, but might be useful in
          approximating some models of regular or intermittent network
          activity.</para>

          <para>The average traffic generation rate for this pattern should be
          approximately the average transmission rate of the core
          &lt;patternType&gt; and &lt;patternParams&gt; multiplied by the
          burst duty cycle (&lt;aveDuration&gt; / &lt;aveInterval&gt;). Note
          that when average burst duration tends to exceed the average burst
          interval, the flow will tend to follow the characteristics of the
          core pattern (i.e. 100% duty cycle).</para>

          <para>Example:<literal/></para>

          <para><literal>#Start a bursty MGEN flow with bursts of 1024 byte
          messages</literal></para>

          <para><literal>#with a periodic rate of 10.0 messages per second.
          The</literal></para>

          <para><literal>#bursts will occur at random intervals with an
          average</literal></para>

          <para><literal>#interval from the start of one burst until the start
          of</literal></para>

          <para><literal>#the next of 10.0 seconds. The duration of each burst
          is</literal></para>

          <para><literal>#of exponential statistics with an average burst
          duration</literal></para>

          <para><literal>#of 5.0 seconds.</literal></para>

          <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 BURST [RANDOM 10.0
          PERIODIC [10.0 1024] EXP 5.0]</literal></para>
        </sect4>

        <sect4 id="JITTER_Pattern">
          <title>JITTER Pattern:</title>

          <para>Option syntax:<literal/></para>

          <para><literal>... JITTER [&lt;rate&gt; &lt;size&gt;
          &lt;jitterFraction&gt;]...</literal></para>

          <para>This pattern type generates messages of a fixed &lt;size&gt;
          (in bytes) with the specified jitter pattern defined by the
          &lt;rate&gt; (in messages/second) and &lt;jitterFraction&gt;. The
          jitterFraction defines the interval of deviation from the rate and
          must be greater than zero and less than 0.5. A jitter pattern of
          "JITTER [1 1024 .5]" will result in packets being sent at a random
          interval between 0.5 seconds and 1.5 seconds. For the UDP protocol
          the &lt;size&gt; field must be greater or equal to the minimum MGEN
          message size and less than or equal to the maximum UDP message size
          of 8192 bytes. For TCP protocol, &lt;size&gt; parameter is
          unlimited. Note the &lt;rate&gt; must be greater than or equal to
          0.0 messages/second for the TCP and UDP protocols.</para>

          <para>Example:<literal/></para>

          <para><literal>#Start an MGEN flow sending 1024 byte
          messages</literal></para>

          <para><literal>#at a random interval between 0.5 and 1.5
          seconds.</literal></para>

          <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 JITTER [1.0 1024
          .5]</literal></para>
        </sect4>

        <sect4 id="CLONE_Pattern">
          <title>CLONE Pattern:</title>

          <para>Option syntax:</para>

          <para><literal>... CLONE [&lt;fileType&gt; &lt;fileName&gt;
          [&lt;repeatCount&gt;]]...</literal></para>

          <para>This pattern type will incrementally read a file of the
          specified &lt;fileType&gt; to determine mgen packet sizes and
          message transmission intervals. Currently only tcpdump binary files
          are supported. It is assumed that the tcpdump file has been filtered
          to contain only the traffic that is to be "cloned".</para>

          <para>At the flow event start time mgen will send a packet
          corresponding to the size of the first packet read from the file.
          Note that mgen assumes the records contain IPv4 UDP headers and
          therefore subtracts 42 bytes from the captured frame size reported
          by tcpdump. The second packet will be read from the file and a the
          second mgen packet of the same size will be sent as scheduled by the
          interval between the first and second packets. When the file is
          rewound, the first packet will not be transmitted. The second packet
          in the file will be scheduled to be sent after the last packet in
          the file according to the interval between the first and second
          packets in the file.</para>

          <para>At present the only valid &lt;fileType&gt; is "tcpdump". The
          tcpdump file must be in binary format (created with tcpdump's -w
          option) and is assumed to be filtered to contain only the traffic
          that is to be cloned.</para>

          <para>&lt;fileName&gt; is the name of the file containing the data
          to be used as the template for the MGEN pattern timing (packet
          intervals) and packet size(s).</para>

          <para>&lt;repeatCount&gt; is an optional parameter that specifies
          the number of times the file is to be processed. &lt;repeatCount&gt;
          can be set to "-1" (the default), "0", or a positive integer. "-1"
          causes the file to be continuously read until the flow is stopped by
          an OFF event or the mgen program ends. "0" directs mgen to clone the
          file once and stop. A positive integer "N" indicates the number of
          repititions through the file, e.g. a value of 1 will cause the file
          to be read twice, once plus the repeat.</para>

          <para>Out of sequence time stamps have been seen occasionally in
          tcpdump output. MGEN will schedule these packets for immediate
          transmission and if running at debug level 2, will log a warning
          message.</para>

          <para>Note that some Linux distributions enable
          "segmentation/reassembly offload". This feature causes the network
          driver to do TCP segmentation and reassembly. In such case, larger
          packets than MGEN can clone will be logged in the pcap files.
          Disable this feature to successfully process this data. (e.g.
          ethtool --offload eth0 gso off; ethtool --offload eth0 tso off;
          ethtool --offload eth0 gro off).</para>

          <para>Example:</para>

          <para><literal>#Start an MGEN flow and clone the contents of the
          specified file once</literal></para>

          <para>0<literal>.0 ON 1 UDP DST 127.0.0.1/5000 CLONE [tcpdump
          tcpdump.dat [0]]</literal></para>
        </sect4>
      </sect3>

      <sect3 id="_Broadcast">
        <title>BROADCAST</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... BROADCAST {ON|OFF} ...</literal></para>

        <para>This sets the SO_BROADCAST socket option to enable or disable
        the sending (and sometimes receiving) of broadcast messages. By
        default BROADCAST is ON.</para>
      </sect3>

      <sect3 id="_Logdata">
        <title>LOGDATA</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... LOGDATA {ON|OFF} ...</literal></para>

        <para>Controls whether MGEN will log the optional data attribute field
        at MGEN receivers (including within MGEN binary log files). It does
        not affect whether MGEN senders send the requested data attribute. By
        default LOGDATA is ON.</para>
      </sect3>

      <sect3 id="_Type-Of-Service_TOS">
        <title>Type-Of-Service (TOS)</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... TOS &lt;value&gt; ...</literal></para>

        <para>The IP TOS (type-of-service) field can be controlled for IP
        packets associated with MGEN traffic generation. The &lt;value&gt;
        field specifies the value of the 8-bit TOS field in IPv4 packets.
        (IPv6 packets do not have a TOS field. MGEN will soon support control
        of the similar FLOW_ID field for IPv6 operation.) The &lt;value&gt;
        field must be in the range of 0-255 in decimal or hexadecimal
        notation. The interpretation of the TOS value by different computer
        operating systems and network devices may vary. In some cases,
        computer hosts will not allow all possible values to be used, and in
        others "super user" (root) privileges may be required to set the IP
        TOS field to certain values. Below are some notes on suggested
        interpretation by the Internet Engineering Task Force (IETF). Note
        that TOS is maintained on a "per socket" basis and that setting the
        TOS for a flow will affect other flows sharing the same network
        socket. See the <link linkend="_Source_Port_SRC">SRC</link> option to
        make sure different flows use different sockets.</para>

        <para>Example:<literal/></para>

        <para><literal>#Start flow 1 with default TOS</literal></para>

        <para><literal>0.0 ON 1 UDP DST 127.0.0.1/5000 PERIODIC [1.0
        1024]</literal></para>

        <para><literal>#Modify flow 1 to TOS = 0x10 (low
        delay)</literal></para>

        <para><literal>5.0 MOD 1 TOS 0x10</literal></para>

        <para>Notes on the value of the IP TOS field:</para>

        <programlisting>    
	<?dbfo keep-together="always" ?>
  0     1     2     3     4     5     6     7   
+-----+-----+-----+-----+-----+-----+-----+-----+
|   PRECEDENCE    |          TOS          | MBZ |
+-----+-----+-----+-----+-----+-----+-----+-----+
</programlisting>

        <para>The Type-of-Service byte in the IP header is divided into three
        sections: the Precedence field (high-order 3 bits), a field that is
        called Type of Service or TOS (next 4 bits), and a reserved bit (the
        low order bit). The TOS bits can be set to 5 different settings
        including the default setting of 0000, while the PRECEDENCE can be set
        to 8 different setting including default 000.</para>

        <para>TOS definitions:</para>

        <informaltable>
          <tgroup cols="4">
            <tbody>
              <row>
                <entry/>

                <entry>IPTOS_TOS_MASKIPTOS_TOS(tos)</entry>

                <entry>0x1E= ((tos) &amp; IPTOS_TOS_MASK)</entry>
              </row>

              <row>
                <entry>1000 --</entry>

                <entry>IP_TOS_LOWDELAY</entry>

                <entry>0x10</entry>

                <entry>TOS = 16</entry>
              </row>

              <row>
                <entry>0100 --</entry>

                <entry>IP_TOS_THROUGHPUT</entry>

                <entry>0x08</entry>

                <entry>TOS = 8</entry>
              </row>

              <row>
                <entry>0010 --</entry>

                <entry>IPTOS_RELIABILITY</entry>

                <entry>0x04</entry>

                <entry>TOS = 4</entry>
              </row>

              <row>
                <entry>0001 --</entry>

                <entry>IPTOS_LOWCOST</entry>

                <entry>0x02</entry>

                <entry>TOS = 2</entry>
              </row>

              <row>
                <entry>0000 --</entry>

                <entry>normal service</entry>

                <entry>0x00</entry>

                <entry>TOS = 0</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Precedence definitions:</para>

        <informaltable>
          <tgroup cols="4">
            <tbody>
              <row>
                <entry>111 --</entry>

                <entry>IPTOS_PREC_MASKIPTOS_PREC(tos)</entry>

                <entry>0xe0= ((tos) &amp;IPTOS_PREC_MASK)</entry>
              </row>

              <row>
                <entry>111 --</entry>

                <entry>IPTOS_PREC_NETCONTROL</entry>

                <entry>0xe0</entry>

                <entry>TOS = 224</entry>
              </row>

              <row>
                <entry>110 --</entry>

                <entry>IPTOS_PREC_INTERNETCONTROL</entry>

                <entry>0xc0</entry>

                <entry>TOS = 192</entry>
              </row>

              <row>
                <entry>101 --</entry>

                <entry>IPTOS_PREC_CRITIC_ECP</entry>

                <entry>0xa0</entry>

                <entry>TOS = 160</entry>
              </row>

              <row>
                <entry>100 --</entry>

                <entry>IPTOS_PREC_FLASHOVERRIDE</entry>

                <entry>0x80</entry>

                <entry>TOS = 128</entry>
              </row>

              <row>
                <entry>011 --</entry>

                <entry>IPTOS_PREC_FLASH</entry>

                <entry>0x60</entry>

                <entry>TOS = 96</entry>
              </row>

              <row>
                <entry>010 --</entry>

                <entry>IPTOS_PREC_IMMEDIATE</entry>

                <entry>0x40</entry>

                <entry>TOS = 64</entry>
              </row>

              <row>
                <entry>001 --</entry>

                <entry>IPTOS_PREC_PRIORITY</entry>

                <entry>0x20</entry>

                <entry>TOS = 32</entry>
              </row>

              <row>
                <entry>000 --</entry>

                <entry>IPTOS_PREC_ROUTINE</entry>

                <entry>0x00</entry>

                <entry>TOS = 0</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>If <literal>TOS = 164 (or 0xa4)</literal>, the Precedence would
        be <literal>IPTOS_PREC_CRITIC_ECP</literal> and the
        <literal>TOS</literal> would be <literal>IPTOS_RELIABILITY</literal>.
        The <literal>IP TOS</literal> field bits would be set as
        <literal>10100100</literal>.</para>
      </sect3>

      <sect3 id="_Time-To-Live_TTL">
        <title>Multicast/Unicast Time-To-Live (TTL)</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... TTL &lt;value&gt; ...</literal></para>

        <para>The time-to-live (TTL) hop count can be controlled for IP
        multicast traffic or Ip unicast traffic (as defined by the dstAddr)
        generated by MGEN. As with <link
        linkend="_Type-Of-Service_TOS">TOS</link>, this is generally a "per
        socket" attribute and care should be taken if it is desired to specify
        different TTL values for different MGEN flows. This can be
        accomplished by using different <link
        linkend="_Source_Port_SRC">SRC</link> (source ports) for different
        MGEN flows. The &lt;value&gt; field must be in the range of 1-255. The
        default multicast TTL assumed by MGEN is 1. The default unicast TTL
        assumed by MGEN is 255.</para>

        <para>Example:<literal/></para>

        <para><literal>#Start an IP multicast flow with a maximum multicast
        hop count ttl = 2</literal></para>

        <para><literal>0.0 ON 1 UDP DST 224.1.2.3/5000 PERIODIC [1.0 256] TTL
        2</literal></para>

        <para><literal>#Start an IP unicast flow with a maximum unicast hop
        count ttl = 2</literal></para>

        <para><literal>0.0 ON 1 UDP DST 10.0.0.1/5000 PERIODIC [1.0 256] TTL
        2</literal></para>
      </sect3>

      <sect3 id="_IPv6_Flow_Label">
        <title>Socket Transmit Buffer Size (TXBUFFER)</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... TXBUFFER &lt;txBufferSize&gt; ...</literal></para>

        <para>This option allows users to set the socket transmit buffer size
        to a value at least as large as &lt;txBufferSize&gt;. If
        &lt;txBufferSize&gt; is larger that the maximum allowed by the system,
        &lt;txBufferSize&gt; will be set to the system maximum. To date, this
        option has only been tested on <emphasis>linux</emphasis>
        systems.</para>
      </sect3>

      <sect3 id="Socket_Receive_Buffer_Size__RXBUFFER">
        <title>Socket Receive Buffer Size (RXBUFFER)</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... RXBUFFER &lt;rxBufferSize&gt; ...</literal></para>

        <para>This option allows users to set the socket receive buffer size
        to a value at least as large as &lt;rxBufferSize&gt;. If
        &lt;rxBufferSize&gt; is larger that the maximum allowed by the system,
        &lt;rxBufferSize&gt; will be set to the system maximum. To date, this
        option has only been tested on <emphasis>linux</emphasis>
        systems.</para>
      </sect3>

      <sect3 id="IPv6_Flow_Label__LABEL">
        <title>IPv6 Flow Label (LABEL)</title>

        <para>Option syntax:<literal/></para>

        <para><literal>... label &lt;value&gt; ...</literal></para>

        <para>This option allows users to specify the value applied to the
        IPv6 packet header "flow label" field. Although this field is 28 bits,
        different operating systems may restrict which portions of the field
        may be set. For example, the current Linux kernel (circa Jan 2003)
        only allows bits in the first octet of the flow label to be set. Other
        values are invalid on Linux, and generate an error message. Thus,
        using hexadecimal format for the &lt;value&gt; specified, legal values
        for Linux are restricted to <literal>&lt;value&gt; =
        0x0??00000</literal> where "??" specifies the first octet of the flow
        label. Other operating systems may behave differently.</para>

        <para>Example:<literal/></para>

        <para><literal># Start an IPv6 flow with flow label =
        0x03d00000</literal></para>

        <para><literal>0.0 ON 1 UDP LABEL 0x03d00000 SRC 5000
        DST5f1b:df00:ce3e:e200:0800:2078:e3e3/5001 PERIODIC [1
        1024]</literal></para>
      </sect3>

      <sect3 id="Multicast_Interface__INTERFACE">
        <title>Multicast Interface (INTERFACE)</title>

        <para>Option syntax:<literal>... INTERFACE &lt;interfaceName&gt;
        ...</literal></para>

        <para>The network interface to use for IP multicast flow transmission
        can be controlled with this option. The &lt;interfaceName&gt; is the
        network interface device name to be used for IP multicast transmission
        for the associated flow. Again, as with <link
        linkend="_Type-Of-Service_TOS">TOS</link> and <link
        linkend="_Time-To-Live_TTL">TTL</link>, this is generally a "per
        socket" attribute and care should be taken if it is desired to specify
        different multicast interfaces for different MGEN flows. This can be
        accomplished by using different <link
        linkend="_Source_Port_SRC">SRC</link> (source ports) for different
        MGEN flows. If no INTERFACE option is used, MGEN will behave according
        to the operating system's default behavior.</para>

        <para>Example:<literal/></para>

        <para><literal>#Start an IP multicast flow on Ethernet interface named
        "eth1"</literal></para>

        <para><literal>0.0 ON 1 UDP DST 224.1.2.3/5000 PERIODIC [1.0 256]
        INTERFACE eth1 SRC 5001</literal></para>
      </sect3>

      <sect3 id="Sequence_Number_Initialization__SEQUENCE">
        <title>Sequence Number Initialization (SEQUENCE)</title>

        <para>Option syntax: <literal/></para>

        <para><literal>... SEQUENCE &lt;sequenceNumber&gt;
        ...</literal></para>

        <para>This option sets the sequence number of the next message
        transmitted for the flow. MGEN flows are normally initialized to a
        sequence number of zero upon the first "ON" event for the flow. The
        sequence number is incremented by one with each message transmitted.
        The SEQUENCE option allows the user to override this behavior. It
        (along with the OFFSET command) is used by the SAVE command with MOD
        events for pending flows when it is desired that mgen return to a
        particular point in a script after being stopped and restarted.</para>

        <para>Example:<literal/></para>

        <para><literal>#Modify the sequence number of an existing flow such
        that</literal></para>

        <para><literal>#the next message is transmitted with sequence number
        452.</literal></para>

        <para><literal>12.0 MOD 1 SEQUENCE 452</literal></para>
      </sect3>

      <sect3>
        <title>UDP Connect (CONNECT)</title>

        <para>Option syntax:</para>

        <para>... CONNECT ...</para>

        <para>The optional UDP CONNECT attribute will direct MGEN to open a
        "connected" UDP socket. If the connection cannot be established or is
        not available for a time period, MGEN will continue to attempt to send
        packets until the flow is stopped.</para>

        <para>Example:</para>

        <para><literal>#Open up a CONNECTED UDP socket</literal></para>

        <para><literal>1.0 ON 1 UDP CONNECT DST 10.0.0.1/500 PER [1
        1024]</literal></para>
      </sect3>

      <sect3>
        <title>DF (fragmentation bit)</title>

        <para>Option syntax:</para>

        <para>... DF {ON|OFF} ...</para>

        <para>The optional DF command controls whether the df fragmentation
        bit is set for the flow.</para>

        <para>Example:</para>

        <para><literal>#Set fragmentation bit</literal></para>

        <para><literal>1.0 ON 1 UDP DST 10.0.0.1/500 PER [1 1024] DF
        ON</literal></para>
      </sect3>
    </sect2>

    <sect2 id="_Reception_Events">
      <title>Reception Events</title>

      <para>For simple reception and logging of unicast traffic, it is
      generally sufficient just to launch mgen with the
      <emphasis>port</emphasis> command line option specifying the port
      numbers to monitor. However, for IP multicast operation or more complex
      behavior, an MGEN script with "Reception Events" is required.;
      "Reception Events" in the MGEN script file format include <link
      linkend="_LISTEN">LISTEN</link> and <link
      linkend="_IGNORE">IGNORE</link> types to control which ports are being
      monitored when; and <link linkend="_JOIN">JOIN</link> and <link
      linkend="_LEAVE">LEAVE</link> types to dynamically control IP group
      membership. The MGEN script syntax of "Reception Events" is:</para>

      <para><literal>&lt;eventTime&gt; &lt;eventType&gt; &lt;parameters
      ...&gt; [&lt;options ...&gt;]</literal></para>

      <sect3 id="_LISTEN">
        <title>LISTEN</title>

        <para>Script syntax:<literal/></para>

        <para><literal>&lt;eventTime&gt; LISTEN &lt;protocol&gt;
        &lt;portList&gt;</literal></para>

        <para>The LISTEN event is used to prompt mgen to begin monitoring one
        or more ports for received traffic. The &lt;eventTime&gt; denotes the
        time (in seconds) relative to script execution. The &lt;protocol&gt;
        field specifies the transport protocol type. Currently, "UDP" and
        "TCP" transports are supported. The &lt;portList&gt; field is a
        comma-delimited list of individual or inclusive ranges of the port
        numbers (no spaces allowed) to begin monitoring. Port ranges within
        the list are specified in the format
        "&lt;lowValue&gt;-&lt;hiValue&gt;".</para>

        <para>Example:<literal/></para>

        <para><literal>#Monitor UDP port numbers 5000, 5003, 5004, 5005,
        5009</literal></para>

        <para><literal>#and TCP port number 6000, 6003, 6004,
        6005</literal></para>

        <para><literal>#beginning at time 0.0</literal></para>

        <para><literal>0.0 LISTEN UDP 5000,5003-5005,5009</literal></para>

        <para><literal>0.0 LISTEN TCP 6000,6003-6005</literal></para>
      </sect3>

      <sect3 id="_IGNORE">
        <title>IGNORE</title>

        <para>Script syntax:<literal/></para>

        <para><literal>&lt;eventTime&gt; IGNORE &lt;protocol&gt;
        &lt;portList&gt;</literal></para>

        <para>The IGNORE event type is the converse to the <link
        linkend="_LISTEN">LISTEN</link> event type. An IGNORE event causes
        mgen tostop monitoring (and logging) received traffic on the specified
        &lt;portList&gt;. The &lt;eventTime&gt; denotes the time (in seconds)
        relative to script execution. The &lt;protocol&gt; field specifies the
        transport protocol type. "UDP" and "TCP" transports are supported. The
        &lt;portList&gt; field is a comma-delimited list of individual or
        inclusive ranges of the port numbers (no spaces allowed) to begin
        monitoring. Port ranges within the list are specified in the format
        <literal>"&lt;lowValue&gt;-&lt;hiValue&gt;".</literal></para>

        <para>Example:<literal/></para>

        <para><literal>#Stop monitoring UDP port numbers 5003, 5004, 5005,
        5009</literal></para>

        <para><literal>#and TCP port numbers 6003, 6004, 6005</literal></para>

        <para><literal>#beginning at time 10.0</literal></para>

        <para><literal>10.0 IGNORE UDP 5003-5005,5009</literal></para>

        <para><literal>10.0 IGNORE TCP 6003-6005</literal></para>
      </sect3>

      <sect3 id="_JOIN">
        <title>JOIN</title>

        <para>Script syntax:<literal/></para>

        <para><literal>&lt;eventTime&gt; JOIN &lt;groupAddress&gt; [SRC
        &lt;srcAddress&gt;] [INTERFACE &lt;interfaceName&gt;] [PORT
        &lt;portNumber| portList&gt;]</literal></para>

        <para>The JOIN event is used to prompt mgen to "join" the specific IP
        multicast group indicated by the &lt;groupAddress&gt; field. The SRC
        option can be used to join a source specific multicast (SSM) channel.
        Note that the SRC option is not presently available on windows. The
        INTERFACE option forces the membership join request on the network
        interface identified by the &lt;interfaceName&gt; field. If no
        INTERFACE option is given, the operating system's default behavior is
        observed. Note it is possible to join the same group on multiple,
        different interfaces.</para>

        <para>The PORT option should be used on WIN32 systems where the IP
        multicast join must be performed on the same socket bound to a
        specific &lt;portNumber&gt;.</para>

        <para>Unix-based operating systems generally allow for IP multicast
        group membership to be independent of specific socket port bindings.
        Note that a corresponding <link linkend="_LISTEN">LISTEN</link> event
        for the indicated &lt;portNumber&gt; is required in order to receive
        traffic if not set as a JOIN command option. Specify the PORT option
        as a JOIN command option if your Unix based system does not support
        port binding independence.</para>

        <para>Not that on IPv6 systems (and when mgen is compiled with the
        HAVE_IPV6 compile option) the JOIN port option must be specified when
        joining an IPv4 group.</para>

        <para>On OSX systems, the interface option must be used if a default
        multicast route is not defined on the system.</para>

        <para>As many IP group memberships as the operating system will
        support is permitted by mgen. This is generally a limit of the maximum
        number of open sockets per process or in the system at large if
        multiple mgen instances are used. Note that WIN32 imposes a limitation
        of one IP multicast group membership per socket while Unix-based
        systems can allow for many memberships (often 20, but OS-specific) per
        socket.</para>

        <para>Examples:<literal/></para>

        <para><literal>#JOIN group 224.1.2.3 at time 0.0</literal></para>

        <para><literal>0.0 JOIN 224.1.2.3</literal></para>

        <para><literal>#JOIN group 224.1.2.4 on interface
        "eth1"</literal></para>

        <para><literal>0.0 JOIN 224.1.2.4 INTERFACE eth1</literal></para>

        <para><literal>#JOIN SSM channel 232.1.1.1 with source 26.26.26.1 on
        interface "eth1"</literal></para>

        <para><literal>0.0 JOIN 224.1.2.4 SRC 25.25.25.1 INTERFACE
        eth1</literal></para>

        <para><literal>#JOIN group 224.1.2.5 using socket bound to port
        5000</literal></para>

        <para><literal>0.0 JOIN 224.1.2.5 PORT 5000</literal></para>

        <para>#JOIN group 224.1.2.6 using sockets bound to ports
        5001-5005</para>

        <para>0.0 JOIN 224.1.2.6 PORT 5001-5005</para>
      </sect3>

      <sect3 id="_LEAVE">
        <title>LEAVE</title>

        <para>Script syntax:<literal/></para>

        <para><literal>&lt;eventTime&gt; LEAVE &lt;groupAddress&gt; [SRC
        &lt;srcAddress&gt;] [INTERFACE &lt;interfaceName&gt;] [PORT
        &lt;portNumber]</literal></para>

        <para>The LEAVE event is used to prompt mgen to "leave" the specific
        IP multicast group indicated by the &lt;groupAddress&gt; field. The
        &lt;groupAddress&gt; must have been joined with a prior <link
        linkend="_JOIN">JOIN</link> event. The INTERFACE and/or PORT options
        <emphasis>must</emphasis> be used if they were used with the
        corresponding <link linkend="_JOIN">JOIN</link> event. Note that the
        SSM SRC option is not presently available on windows.</para>

        <para>Examples:<literal/></para>

        <para><literal>#LEAVE group 224.1.2.3 at time 10.0</literal></para>

        <para><literal>10.0 LEAVE 224.1.2.3</literal></para>

        <para><literal>#LEAVE group 224.1.2.4 on interface "eth1" at time
        10.0</literal></para>

        <para><literal>10.0 LEAVE 224.1.2.4 INTERFACE eth1</literal></para>

        <para><literal>#LEAVE SSM channel 232.1.1.1 with source 25.25.25.1 on
        interface "eth1" at time 10.0</literal></para>

        <para><literal>10.0 LEAVE 224.1.2.4 SRC 25.25.25.1 INTERFACE
        eth1</literal></para>

        <para><literal>#LEAVE group 224.1.2.4 on interface "eth1"and port 5000
        at time 10.0</literal></para>

        <para><literal>10.0 LEAVE 224.1.2.4 INTERFACE eth1 PORT
        5000</literal></para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="_Global_Commands">
    <title>Global Commands</title>

    <para>The MGEN script file format supports a subset of commands which are
    independent of normal transmission and reception event scheduling. These
    are referred to as "Global Commands". This subset includes commands to
    specify an absolute script execution start time (START command) and to
    specify default traffic generation characteristics (e.g. multicast
    INTERFACE, multicast TTL, IP TOS, etc).</para>

    <para>The format of script lines containing global commands
    is:<literal>&lt;command&gt; &lt;parameters&gt;</literal></para>

    <para>In general, a script file should contain only one occurrence of each
    global command type. If there are multiple occurrences of a command type,
    the last occurrence will determine mgen's behavior. These commands can
    also be given on the mgen command-line. Global commands given on the mgen
    command-line will override any corresponding global commands in the script
    file(s).</para>

    <para>The MGEN "Global Command" set includes:</para>

    <informaltable>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry><link linkend="_START">START</link></entry>

            <entry>Specifies an absolute start time for script
            processing.</entry>
          </row>

          <row>
            <entry><link linkend="_OFFSET">OFFSET</link></entry>

            <entry>Specifies an offset time into script for MGEN
            activity.</entry>
          </row>

          <row>
            <entry><link linkend="_TOS">TOS</link></entry>

            <entry>Specifies a default IPv4 TOS value for IPv4 flows.</entry>
          </row>

          <row>
            <entry><link linkend="_LABEL">LABEL</link></entry>

            <entry>Specifies a default IPv6 Flow Label for IPv6 flows.</entry>
          </row>

          <row>
            <entry><link linkend="_TTL">G</link></entry>

            <entry>Specifies a default TTL (time-to-live) hop count for
            transmitted multicast packets.</entry>
          </row>

          <row>
            <entry><link linkend="_TTL">UNICAST_TTL</link></entry>

            <entry>Specifies a default TTL (time-to-live) hop count for
            transmitted unicast packets.</entry>
          </row>

          <row>
            <entry><link linkend="_INTERFACE">INTERFACE</link></entry>

            <entry>Specifies the name of the default interface to use for IP
            multicast.</entry>
          </row>

          <row>
            <entry><link linkend="_INPUT">INPUT</link></entry>

            <entry>Specifies the name of a script file to be loaded and
            parsed.</entry>
          </row>

          <row>
            <entry><link linkend="_OUTPUT">OUTPUT</link></entry>

            <entry>Specifies the name of the log file to record logged events.
            If the named log file pre-exists, it is overwritten.</entry>
          </row>

          <row>
            <entry><link linkend="_LOG">LOG</link></entry>

            <entry>Same as OUTPUT, except that pr-existing log files are
            appended instead of overwritten.</entry>
          </row>

          <row>
            <entry><link linkend="_SAVE">SAVE</link></entry>

            <entry>Specifies a file to which MGEN should store sequence number
            state for any pending or active flows as well as the current
            relative script offset time when mgen is terminated.</entry>
          </row>

          <row>
            <entry><link linkend="_TXBUFFER">TXBUFFER</link></entry>

            <entry>Specifies a default socket transmit buffer size.</entry>
          </row>

          <row>
            <entry><link linkend="_RXBUFFER">RXBUFFER</link></entry>

            <entry>Specifies a default socket receive buffer size.</entry>
          </row>

          <row>
            <entry><link linkend="_LOCALTIME">LOCALTIME</link></entry>

            <entry>Specifies that mgen events and error messages are logged in
            localtime rather than the default Greenwich Mean Time.</entry>
          </row>

          <row>
            <entry><link linkend="_QUEUE">QUEUE</link></entry>

            <entry>Specifies the default number of mgen messages that should
            be queued before mgen turns off the transmission timer for a
            flow.</entry>
          </row>

          <row>
            <entry><link linkend="_Logdata">LOGDATA</link></entry>

            <entry>Controls whether MGEN will log the optional data attribute
            field at MGEN receivers (including within MGEN binary log files).
            It does not affect whether MGEN senders send the requested data
            attribute. By default LOGDATA is set to ON.</entry>
          </row>

          <row>
            <entry><link linkend="_IPV6">IPV6</link></entry>

            <entry>Forces mgen to open sockets for IPv6 operation (i.e.
            AF_INET6 domain sockets) only. The default behavior for mgen is to
            open sockets with the domain based on environment and the type of
            IP addresses used in the script file used.</entry>
          </row>

          <row>
            <entry><link linkend="_Logdata">IPV4</link></entry>

            <entry>Forces mgen to open sockets for IPv4 operation (i.e.
            AF_INET domain sockets) only. The default behavior for mgen is to
            open sockets with the domain based on environment and the type of
            IP addresses used in the script file used.</entry>
          </row>

          <row>
            <entry><link linkend="_DF">DF</link></entry>

            <entry>Controls whether the DF fragmentation bit is set.
            {ON|OFF}</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <sect2 id="_START">
      <title>START</title>

      <para>Script syntax:<literal/></para>

      <para><literal>START &lt;hour:min:sec&gt;[GMT]</literal></para>

      <para>The START command designates an absolute time as indicated by the
      <literal>&lt;hour:min:sec&gt;</literal> field to correspond to the
      relative script time of 0.0 seconds. All transmission and reception
      events will be scheduled relative to this absolute start time. The
      optional GMT suffix (no white space after the time) indicates that the
      clock time given is Greenwich Mean Time (GMT) rather than the operating
      systems local time zone. If no START command is given, mgen schedules
      transmission and reception events relative to program startup.</para>

      <para>Example:</para>

      <para><literal>#Start MGEN exactly at 1:30PM local time</literal></para>

      <para><literal>START 13:30:00</literal></para>

      <para><literal>#Start MGEN at 30 seconds past 8:30 GMT</literal></para>

      <para><literal>START 8:30:30GMT</literal></para>
    </sect2>

    <sect2 id="_OFFSET">
      <title>OFFSET</title>

      <para>Script syntax:<literal/></para>

      <para><literal>OFFSET &lt;seconds&gt;</literal></para>

      <para>The OFFSET global command specifies a relative time offset (in
      seconds)into script processing where MGEN should begin its activity.
      This allows multiple instances of MGEN using the same script to be
      dithered as desired. Additionally, this command may be used to
      immediately restore MGEN to a specific scripted state other than the
      beginning of the script upon launch.</para>

      <para>Example:</para>

      <para>#Skip the first 10 seconds of an MGEN script</para>

      <para><literal>OFFSET 10.0</literal></para>
    </sect2>

    <sect2 id="_TOS">
      <title>TOS</title>

      <para>Script syntax:<literal/></para>

      <para><literal>TOS &lt;value&gt;</literal></para>

      <para>The TOS command specifies ...</para>

      <para>Example:</para>

      <para><literal>#Specify default tos = 0x10 (low delay)</literal></para>

      <para><literal>TOS 0x10</literal></para>
    </sect2>

    <sect2 id="_LABEL">
      <title>LABEL</title>

      <para>Script syntax:<literal/></para>

      <para><literal>LABEL &lt;value&gt;</literal></para>

      <para>The LABEL command specifies a default value to be used as the
      "flow label" for IPv6 flows. The "flow label" is the corresponding
      28-bit field in the IPv6 packet header. Refer to the Transmission Event
      <link linkend="_IPv6_Flow_Label">LABEL</link> option for further
      details..</para>

      <para>Example:</para>

      <para><literal>#Specify default IPv6 flow label =
      0x02500000</literal></para>

      <para><literal>LABEL 0x02500000</literal></para>
    </sect2>

    <sect2 id="_TTL">
      <title>TTL</title>

      <para>Script syntax:<literal/></para>

      <para><literal>TTL &lt;value&gt;</literal></para>

      <para>The TTL command specifies the default time-to-live (TTL) hop count
      for generated IP multicast traffic according to the &lt;value&gt; field.
      The &lt;value&gt; must be in the range of 1-255. If the global TTL
      command is not used, mgen assumes a default multicast TTL value of 1.
      Note that the transmission event TTL option will override the default
      specification given by this global command.</para>

      <para>Example:</para>

      <para><literal>#Specify default multicast flow ttl = 32</literal></para>

      <para><literal>TTL 32</literal></para>
    </sect2>

    <sect2 id="_TTL">
      <title>UNICAST_TTL</title>

      <para>Script syntax:<literal/></para>

      <para><literal>UNICAST_TTL &lt;value&gt;</literal></para>

      <para>The TTL command specifies the default unicast time-to-live (TTL)
      hop count for generated IP unicast traffic according to the
      &lt;value&gt; field. The &lt;value&gt; must be in the range of 1-255. If
      the global UNICAST_TTL command is not used, mgen assumes a default
      unicast TTL value of 255. Note that the transmission event TTL option
      will override the default specification given by this global
      command.</para>

      <para>Example:</para>

      <para><literal>#Specify default unicast flow ttl = 32</literal></para>

      <para><literal>UNICAST_TTL 32</literal></para>
    </sect2>

    <sect2 id="_TXBUFFER">
      <title>TXBUFFER</title>

      <para>Script syntax:<literal/></para>

      <para><literal>TXBUFFER &lt;txBufferSize&gt; ...</literal></para>

      <para>This option allows users to set the default socket transmit buffer
      size to a value at least as large as &lt;txBufferSize&gt;. The exact
      behavior of this option may be operating system dependent. The TXBUFFER
      option given on transmission event script lines will override this
      default for the socket used by the corresponding flow.</para>
    </sect2>

    <sect2 id="_RXBUFFER">
      <title>RXBUFFER</title>

      <para>Script syntax:<literal/></para>

      <para><literal>RXBUFFER &lt;rxBufferSize&gt; ...</literal></para>

      <para>This option allows users to set the default socket receive buffer
      size to a value ?at least? as large as &lt;rxBufferSize&gt;. The exact
      behavior of this option may be operating system dependent. The RXBUFFER
      option given on transmission event script lines will override this
      default for the socket used by the corresponding flow.</para>
    </sect2>

    <sect2 id="_LOCALTIME">
      <title>LOCALTIME</title>

      <para>Script syntax:</para>

      <para><literal>LOCALTIME</literal></para>

      <para>This option allows users to specify that events and error messages
      be logged in localtime rather than the default Greenwich Mean
      Time.</para>
    </sect2>

    <sect2 id="_QUEUE">
      <title>QUEUE</title>

      <para>Script syntax:<literal/></para>

      <para><literal>QUEUE</literal></para>

      <para>This global command will cause mgen to buffer &lt;queueSize&gt;
      mgen packets for each flow during periods of congestion. (Note that flow
      specific limits specified at the transmission event level will override
      this global). When the number of pending messages for a flow exceeds
      this limit, the message transmission timer will be temporarily
      deactivated and any pending messages will transmitted as quickly as
      possible. The timer will be reactivated once the pending message count
      falls below the queue limit, and message transmission will return to the
      previously scheduled rate of transmission.</para>

      <para>If no global command is specified, a default &lt;queueSize&gt; of
      "0" will be in effect which will result in no queuing behavior, e.g. the
      transmission timer will continue to fire at its regularly scheduled
      interval regardless of transport congestion. No pending message count
      will be accumulated and message transmission will suceed or fail
      depending on transport availability.</para>

      <para>When multiple flows are sending messages over a common mgen
      transport, the flows that have exceeded their pending message limit(s)
      will be serviced in a round robin fashion until all pending messages
      have been sent for all flows. Transmissions for flows that have fallen
      below this threshold will be interleaved as scheduled.</para>

      <para>A &lt;queueSize&gt; threshold of "-1" sets an unlimited queue
      size. This means that a congested flow's transmission timer will
      continue to fire (thereby building up it's pending message count), but
      any pending messages will be sent as quickly as possible until
      congestion clears.</para>

      <para>Any pending messages for a flow will be sent before the flow will
      be shutdown by a scheduled <link linkend="_OFF_Event">OFF</link> event.
      Likewise, the pending message queue for a flow that is being restarted
      will be cleared. Note however, if any of the content of the mgen message
      header is changed (src or dst addresses, etc.) the pending message count
      will be reset. All other flow attribute changes (rage, message size,
      payload content, ttl, etc.) will be effected immediately, including any
      pending messages.</para>
    </sect2>

    <sect2>
      <title>DATA</title>

      <para>Script Syntax:</para>

      <para><programlisting>DATA [&lt;hex&gt;,&lt;hex&gt;]</programlisting>User
      defined message payload can be specified with the DATA command. The data
      should be a hexadecimal representation of the user data where each pair
      of characters corresponds to one byte of user data. The contents will be
      placed in every packet generated by the flow.</para>
    </sect2>

    <sect2 id="_INTERFACE">
      <title>INTERFACE</title>

      <para>Script syntax:<literal/></para>

      <para><literal>&lt;interfaceName&gt;</literal></para>

      <para>The INTERFACE command specifies a default IP network interface to
      use for multicast traffic generation and group membership. If no
      INTERFACE command is given, the default operating system behavior is
      observed. Note that the transmission event INTERFACE option or the JOIN
      reception event INTERFACE option will override the default specification
      given by this global command.</para>

      <para>Example:</para>

      <para><literal>#Specify "eth1" as the default network
      interface</literal></para>

      <para><literal>#for multicast transmission and group
      joins</literal></para>

      <para><literal>INTERFACE eth1</literal></para>
    </sect2>

    <sect2 id="_INPUT">
      <title>INPUT</title>

      <para>Script syntax:<literal/></para>

      <para><literal>INPUT &lt;scriptFile&gt;</literal></para>

      <para>The INPUT command cause MGEN to load and parse the given
      &lt;scriptFile&gt;. (Circular references are not detected by mgen and
      should be avoided_). This allows scripts to "include" other scripts. The
      parsing occurs in the order that the INPUT commands are encountered on
      the command-line and within the script files themselves.</para>

      <para>Example:</para>

      <para><literal>#Load and parse the MGEN script file
      "script2.mgn"</literal></para>

      <para><literal>INPUT script2.mgn</literal></para>
    </sect2>

    <sect2 id="_OUTPUT">
      <title>OUTPUT</title>

      <para>Script syntax:<literal/></para>

      <para><literal>OUTPUT &lt;logFile&gt;</literal></para>

      <para>The OUTPUT command cause mgen to direct its log output to the
      indicated &lt;logFile&gt;. The last occurring OUTPUT command determines
      the log file to be used and the command-line takes precedence over any
      scripts provided as input to mgen. The file named by &lt;logFile&gt;
      will be overwritten if it already exists.</para>

      <para>Example:<literal/></para>

      <para><literal>#Use the file "logFile.drc" for logging</literal></para>

      <para><literal>OUTPUT logFile.drc</literal></para>
    </sect2>

    <sect2 id="_LOG">
      <title>LOG</title>

      <para>Script syntax:<literal/></para>

      <para><literal>LOG &lt;logFile&gt;</literal></para>

      <para>The LOG command cause mgen to direct its log output to the
      indicated &lt;logFile&gt;. The last occurring LOG command determines the
      log file to be used and the command-line takes precedence over any
      scripts provided as input to mgen. The file named by &lt;logFile&gt;
      will be appended if it already exists.</para>

      <para>Example:<literal/></para>

      <para><literal>#Append the file "logFile.drc"</literal></para>

      <para><literal>LOG logFile.drc</literal></para>
    </sect2>

    <sect2 id="_Logdata">
      <title>LOGDATA</title>

      <para>Script syntax:<literal/></para>

      <para><literal>LOGDATA {on|off}}</literal></para>

      <para>Controls whether MGEN will log the optional data attribute field
      at MGEN receivers (including within MGEN binary log files). It does not
      affect whether MGEN senders send the requested data attribute. By
      default LOGDATA is set to ON.</para>

      <para>Example:<literal/></para>

      <para><literal>#Don't log optional data attribute at
      receiver</literal></para>

      <para><literal>LOGDATA off</literal></para>
    </sect2>

    <sect2 id="_SAVE">
      <title>SAVE</title>

      <para>Script syntax:<literal/></para>

      <para><literal>SAVE &lt;saveFile&gt;</literal></para>

      <para>The SAVE command causes mgen to write a short MGEN script upon
      exit which includes current sequence number state for pending and active
      transmission flows as well as the current relative script offset time.
      If the &lt;saveFile&gt; created is given as an additional input script
      (with the <emphasis>same</emphasis> input script(s) given for the mgen
      instance which created &lt;saveFile&gt;), on a subsequent launch of
      mgen, mgen will return to the same state as it was when it previously
      exited.</para>

      <para>The SAVE command can be used when it is desired to conduct
      separate runs of mgen, but preserve a continuous sequence number space
      across the multiple runs. An example script performing this function is
      given below. Note the same behavior can also be achieved via the mgen
      command-line using:</para>

      <para>"<literal>mgen input &lt;scriptFile&gt; input &lt;saveFile&gt;
      save &lt;saveFile&gt; log &lt;logFile&gt;"</literal></para>

      <para>if an empty &lt;saveFile&gt; is provided on the first launch of
      mgen.</para>

      <para>Example:<literal/></para>

      <para><literal># This script executes another MGEN script,
      using</literal></para>

      <para><literal># "saveFile.mgn" for state recovery upon
      subsequent</literal></para>

      <para><literal># restarts after mgen is exited.</literal></para>

      <para><literal># (If "saveFile.mgn" is empty or non-existent
      upon</literal></para>

      <para><literal># initial startup, the "scriptFile.mgn" is
      run</literal></para>

      <para><literal># from the beginning.)</literal></para>

      <para><literal># (The "log" command is used to repeatedly
      append</literal></para>

      <para><literal># the "logFile.drc" file upon stop and
      restart)</literal></para>

      <para><literal>INPUT scriptFile.mgn</literal></para>

      <para><literal>INPUT saveFile.mgn</literal></para>

      <para><literal>SAVE saveFile.mgn</literal></para>

      <para><literal>LOG logFile.drc</literal></para>
    </sect2>

    <sect2 id="_SAVE">
      <title>IPv6</title>

      <para>Script syntax:<literal/></para>

      <para><literal>IPv6</literal></para>

      <para>Forces mgen to open sockets for IPv6 operation (i.e. AF_INET6
      domain sockets) only. The default behavior for mgen is to open sockets
      with the domain based on environment and the type of IP addresses used
      in the script file used.</para>

      <para>Example:<literal/></para>

      <para><literal># Global IPv6 option</literal></para>

      <para>IPV6</para>
    </sect2>

    <sect2 id="_SAVE">
      <title>IPv4</title>

      <para>Script syntax:<literal/></para>

      <para><literal>IPv4</literal></para>

      <para>Forces mgen to open sockets for IPv4 operation (i.e. AF_INET
      domain sockets) only. The default behavior for mgen is to open sockets
      with the domain based on environment and the type of IP addresses used
      in the script file used.</para>

      <para>Example:<literal/></para>

      <para><literal># Gloval IPv4 option</literal></para>

      <para><literal>IPv4</literal></para>
    </sect2>

    <sect2 id="_SAVE">
      <title>DF</title>

      <para>Script syntax:<literal/></para>

      <para><literal>DF {ON|OFF}</literal></para>

      <para>Controls whether the DF fragmentation bit is set.</para>

      <para>Example:<literal/></para>

      <para><literal># Set DF fragmentation bit</literal></para>

      <para><literal>DF on</literal></para>
    </sect2>
  </sect1>

  <sect1 id="_MGEN_Log_File">
    <title>MGEN Log File Format</title>

    <para><anchor id="b5"/><anchor id="b7"/>The MGEN message format contains
    information to facilitate network performance measurements through
    post-analysis of MGEN log files. Some of the types of performance
    statistics which can be determined include:</para>

    <informaltable>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Message Throughput</entry>

            <entry>The time or arrival and size of received messages are
            logged by MGEN receivers. Network throughput can be assessed with
            this information.</entry>
          </row>

          <row>
            <entry>Message Delivery Latency</entry>

            <entry>MGEN messages contain a timestamp reflecting when they were
            sent and the time of reception is logged by MGEN receivers.
            Delivery latency statistics (jitter or absolute if clock
            synchronization (e.g. NTP) is possible) can be determined with
            this information.</entry>
          </row>

          <row>
            <entry>Message Loss Rate</entry>

            <entry>MGEN messages are sequence numbered. Message loss can be
            accounted for via analysis of logged sequence number
            information.</entry>
          </row>

          <row>
            <entry>Message Re-ordering</entry>

            <entry>The logged MGEN sequence number information can also be
            used to determine message re-ordering statistics.</entry>
          </row>

          <row>
            <entry>Multicast JOIN/LEAVE Latency</entry>

            <entry>The occurrence and time of JOIN/LEAVE events are logged by
            MGEN receivers. The JOIN latency can be determined by comparing
            the arrival time of the first message associated with a particular
            multicast group to the time the group was joined. The LEAVE
            latency can be determined by comparing the time of the _last_
            packet arrival time to the time the receiver left that multicast
            group (Note that you need a packet sniffing program like <ulink
            url="http://www.tcpdump.org/">tcpdump</ulink> to see packets after
            you leave the group).</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Many of the above performance measures and statistics can be
    measured and optionally graphed using the NRL <ulink
    url="http://pf.itd.nrl.navy.mil/proteantools/trpr.html">trpr</ulink>
    (trace plot real-time) program. This program can parse the MGEN log file
    format and <ulink url="http://www.tcpdump.org/">tcpdump</ulink>
    traces.</para>

    <sect2 id="General_Log_Format">
      <title>General Log Format</title>

      <para>Each line of the MGEN text log file format corresponds to a unique
      event and follows the convention:&lt;eventTime&gt; &lt;eventType&gt;
      &lt;event attributes ...&gt;The &lt;eventTime&gt; field is in the form
      hrs:min:sec and represents the computer's system Greenwich Mean Time
      (GMT) at the time of the event.</para>

      <para>The &lt;eventType&gt; field is one of the following:</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><link linkend="_Log_File_RECV">RECV</link></entry>

              <entry>Denotes the arrival of a received MGEN message.</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_RERR">RERR</link></entry>

              <entry>Indicates an invalid MGEN message was received.</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_SEND_Events">SEND</link></entry>

              <entry>Denotes the transmission of an MGEN message.</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_JOIN">JOIN</link></entry>

              <entry>Marks a join to an IP multicast group.</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_LEAVE">LEAVE</link></entry>

              <entry>Marks the departure from an IP multicast group.</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_LISTEN">LISTEN</link></entry>

              <entry>Indicates when mgen began monitoring a specific
              port</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_IGNORE">IGNORE</link></entry>

              <entry>Indicates when mgen ended monitoring of a specific
              port</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_ON">ON</link></entry>

              <entry>Indicates when mgen initiated a TCP connection to the
              indicated destination ip address and port or when a UDP flow
              began transmitting.</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_CONNECT">CONNECT</link></entry>

              <entry>Indicates when an mgen TCP "client" or "sender" has
              established a TCP connection from the indicated source port or
              to the destination ip address and port.</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_ACCEPT">ACCEPT</link></entry>

              <entry>Indicates when an mgen TCP "server" or "listener" has
              accepted a TCP connection from the indicated source ip address
              and port to the destination port.</entry>
            </row>

            <row>
              <entry><link
              linkend="_Log_File_DISCONNECTED">SHUTDOWN</link></entry>

              <entry>Indicates when an mgen TCP connection was shutdown after
              a scheduled &gt;OFF&lt; event on the client side or when an
              active connection is shutdown by the server on the server side.
              When TCP completes the shutdown procedure, an OFF or a
              DISCONNECT event will be logged as appropriate.</entry>
            </row>

            <row>
              <entry><link
              linkend="_Log_File_SHUTDOWN">DISCONNECT</link></entry>

              <entry>Indicates when an mgen TCP connection was disconnected
              prior to a scheduled &gt;OFF&lt; event on either the client or
              server side. This event indicates a TCP error has occurred on
              the connection. (NOTE: this indication of an unscheduled TCP
              shutdown is currently reliable only on Linux systems.)</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_OFF">OFF</link></entry>

              <entry>Indicates that an mgen flow was stopped by a scheduled
              &gt;OFF&lt; event on the client or by a server IGNORE event on
              the sever. (Only available when transmission logging is enabled
              on the client side).</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_Start_Stop">START</link></entry>

              <entry>Indicates when mgen started processing Transmission and
              Reception events.</entry>
            </row>

            <row>
              <entry><link linkend="_Log_File_Start_Stop">STOP</link></entry>

              <entry>Indicates when mgen stopped processing Transmission and
              Reception events.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Different event types will have different event attribute sets.
      The &lt;event attribute&gt; fields are explicitly labeled so that log
      file parsing programs can seek specific attributes of interest for given
      event types.</para>
    </sect2>

    <sect2 id="_Log_File_RECV">
      <title>Log File RECV Events</title>

      <para>The format of the RECV event log file line is:</para>

      <para><literal>&lt;eventTime&gt; RECV proto&gt;&lt;protocol&gt;
      flow&gt;&lt;flowId&gt; seq&gt;&lt;sequenceNumber&gt; src&gt;&lt;addr&gt;
      /&lt;port&gt; dst&gt;&lt;addr&gt;/&lt;port&gt; sent&gt;&lt;txTime&gt;
      size&gt;&lt;bytes&gt; [host&gt;&lt;addr&gt;/&lt;port&gt;]
      [gps&gt;&lt;status&gt;,&lt;lat&gt;,&lt;long&gt;,&lt;alt&gt;]
      [data&gt;&lt;len&gt;:&lt;data&gt;]
      [flags&gt;&lt;flag&gt;]</literal></para>

      <para>The &lt;eventTime&gt; corresponds to when the message was
      received. The &lt;protocol&gt; specifies the protocol (udp,tcp,sink).The
      &lt;flowId&gt;, &lt;sequenceNumber&gt;, and &lt;txTime&gt;, are from the
      payload of the MGEN message. The &lt;txTime&gt; is in the same format as
      the &lt;eventTime&gt; (i.e. &lt;hr:min:sec&gt; GMT)</para>

      <para>The "dst" &lt;addr&gt;/&lt;port&gt; is from the message payload
      and corresponds to the destination address to which the source addressed
      the MGEN message.</para>

      <para>The "src" &lt;addr&gt;/&lt;port&gt; is the source address
      determined from the corresponding <literal>recvfrom()</literal> call for
      UDP transport or the address to which the TCP connection was made. (An
      optional "host" address will be embedded in the payload by the MGEN
      message source and made available as an attribute of the logged RECV
      event in the future).</para>

      <para>The message "size" in &lt;bytes&gt; is also from the payload, but
      for UDP transport, should also correspond to the UDP packet payload
      size. Note that TCP mgen messages can be larger than the maximum UDP
      message size of 8192 bytes and can be of unlimited size. Therefore, mgen
      breaks large TCP messages into mgen message "fragments" of a maximum
      size of 65535 and sets a flag on the mgen message to indicate that it is
      a TCP message "fragment". Message fragments are flagged with 0x01 to
      indicate that the message is not complete. The last fragment in a TCP
      message is flagged 0x02 to indicate "end of message".</para>

      <para>For example, a TCP mgen message of size 66559 will be received and
      logged by the receiving node as two messages as follows:</para>

      <para>00:33:36.427143 RECV proto&gt;TCP flow&gt;1 seq&gt;1
      src&gt;10.0.0.1/35056 dst&gt;10.0.0.2/5000 sent&gt;00:36:11.377105
      size&gt;65535 gps&gt;INVALID,999.000000,999.000000,-999
      flags&gt;0x01</para>

      <para>00:33:36.427499 RECV proto&gt;TCP flow&gt;1 seq&gt;1
      src&gt;10.0.0.1/35056 dst&gt;10.0.0.1/5000 sent&gt;00:36:11.380137
      size&gt;1024 gps&gt;INVALID,999.000000,999.000000,-999
      flags&gt;0x02</para>

      <para>Also note that a single SEND message will be logged by the
      transmitting node with a size corresponding to the TCP message size,
      e.g.:</para>

      <para>00:29:51.396962 SEND proto&gt;TCP flow&gt;1 seq&gt;1 srcPort&gt;0
      dst&gt;10.0.0.2/5000 size&gt;66559</para>

      <para>The "host" &lt;addr&gt;/&lt;port&gt; corresponds to the MGEN
      message source's "perceived" default local address. Note that this may
      be different from the source address contained in the MGEN log file due
      to firewalls, Network Address Translation (NAT) devices, multi-homed
      sources, etc. The accuracy of this information depends upon the source
      host's configuration with regards to domain name service (DNS), etc.
      Note this field is optional and may not be present if this information
      is not valid (The current initial MGEN release does not yet support this
      option).</para>

      <para>The "src", "dst", and "host" &lt;addr&gt; fields are dotted
      decimal IPv4 addresses or colon-delimited IPv6 addresses.</para>

      <para>The "flags" field is discussed above.</para>

      <para>The global positioning system (GPS) information is available when
      the MGEN message source is used in conjunction with the NRL <ulink
      url="http://pf.itd.nrl.navy.mil/proteantools/gpsLogger.html">gpsLogger</ulink>
      program. This program monitors an attached GPS receiver for position
      information and "publishes" it in shared memory. When mgen is run and
      detects that it can "subscribe" to GPS position information, it places
      it in the MGEN message payload. Note that <ulink
      url="http://pf.itd.nrl.navy.mil/proteantools/gpsLogger.html">gpsLogger</ulink>
      can also be used with a pulse-per-second (PPS) capable GPS receiver to
      provide accurate time synchronization for hosts running the MGEN
      toolset. This may be useful for mobile network test environments. The
      MGEN log file "gps" attribute has the following comma-delimited
      fields:</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>&lt;status&gt;</entry>

              <entry>This indicates the validity of the GPS information and
              may be either "INVALID", "CURRENT", or "STALE".</entry>
            </row>

            <row>
              <entry>&lt;lat&gt;</entry>

              <entry>This is the GPS latitude in degrees. A negative value
              denotes South while a positive value denotes North.</entry>
            </row>

            <row>
              <entry>&lt;long&gt;</entry>

              <entry>This is the GPS longitude in degrees. A negative value
              denotes West while a positive value denotes East.</entry>
            </row>

            <row>
              <entry>&lt;alt&gt;</entry>

              <entry>This is the GPS altitude in meters.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The optional "data" attribute is present only if the received MGEN
      message contains optional user-defined payload. If present, the
      &lt;len&gt; indicates the length (in bytes) of the user-defined payload
      and the &lt;data&gt; following the colon character':' is a hexadecimal
      representation of the user data where each pair of characters
      corresponds to one byte of user data. Thus, the number of characters in
      the &lt;data&gt; field will be 2 * &lt;len&gt;. (The "data" option was
      supported in MGEN 3.x via the MGEN Payload Manager (mpmgr) tool and is
      not yet supported in MGEN 4.x. The documentation will be updated when
      this option is supported).</para>

      <para>Example RECV event log lines:<literal/></para>

      <para><literal>22:59:52.312721 RECV proto&gt;&lt;protocol&gt; flow&gt;1
      seq&gt;1 src&gt;10.0.0.1/5000 dst&gt;10.0.0.2/5002
      sent&gt;22:59:52.310324 size&gt;1024</literal></para>

      <para><literal>23:59:53.312721 RECV proto&gt;&lt;protocol&gt; flow&gt;1
      seq&gt;2 src&gt;10.0.0.1/5000 dst&gt;10.0.0.2/5002
      sent&gt;22:59:52.310324 size&gt;1024 host&gt;10.0.0.1/5000
      gps&gt;CURRENT,35.123,79.234,57</literal></para>

      <para><literal>23:59:53.312721 RECV proto&gt;&lt;protocol&gt; flow&gt;1
      seq&gt;2 src&gt;10.0.0.1/5000 dst&gt;10.0.0.1/5002
      sent&gt;22:59:52.310324 size&gt;1024 host&gt;10.0.0.1/5000
      gps&gt;CURRENT,35.123,79.234,57
      data&gt;10:01a97b34458cff0021e8</literal></para>
    </sect2>

    <sect2 id="_Log_File_RERR">
      <title>Log File RERR Events</title>

      <para>The format of the RERR (Receive Error) event log file line
      is:<literal/></para>

      <para><literal>&lt;eventTime&gt; RERR proto&gt;&lt;protocol&gt;
      type&gt;&lt;errorType&gt;
      src&gt;&lt;addr&gt;/&lt;port&gt;</literal></para>

      <para>The &lt;eventTime&gt; corresponds to when the message in error was
      received. The &lt;errorType&gt; is one of "none", "version", "checksum",
      or "dstaddr". An receive error of type "version" indicates the MGEN
      sender is using an mgen executable with an incompatible version number.
      The "checksum" error indicates the received message failed checksum
      validation, and the "dstaddr" error indicates an invalid or unsupported
      destination address type in the MGEN message received. The &lt;src&gt;
      attribute indicates the source address of the message in error.</para>
    </sect2>

    <sect2 id="_Log_File_SEND_Events">
      <title>Log File SEND Events</title>

      <para>The format of the SEND event log file line is:<literal/></para>

      <para><literal>&lt;eventTime&gt; SEND proto&gt;&lt;protocol&gt;
      flow&gt;&lt;flowId&gt; seq&gt;&lt;sequenceNumber&gt;
      src&gt;&lt;srcPort&gt; dst&gt;&lt;addr&gt;/&lt;port&gt;
      size&gt;&lt;bytes&gt;
      [host&gt;&lt;addr&gt;/&lt;port&gt;]</literal></para>

      <para>The &lt;eventTime&gt; corresponds to when the message was sent,
      and it should precisely match the &lt;txTime&gt; logged by the machine
      the packet is sent to, if the packet is received correctly.</para>

      <para>All the data items are the same as those used in the Log File RECV
      Events.</para>
    </sect2>

    <sect2 id="_Log_File_JOIN">
      <title>Log File JOIN Events</title>

      <para>The format of the JOIN log file event line is:</para>

      <para>&lt;eventTime&gt; JOIN group&gt; &lt;groupAddress&gt; [src&gt;
      &lt;srcAddress&gt;] [interface&gt; &lt;interfaceName&gt;]</para>

      <para>The &lt;groupAddress&gt; is the IP multicast group address which
      was joined. The format of this field is either a dotted decimal IPv4
      address or a colon-delimited IPv6 address. The &lt;interfaceName&gt; is
      given only when the executed MGEN script used the INTERFACE option in
      the corresponding <link linkend="_JOIN">JOIN</link> script event.</para>

      <para>Example JOIN event log lines:</para>

      <para><literal>22:59:50:234757 JOIN group&gt;224.1.2.3</literal></para>

      <para><literal>22:59:51:129574 JOIN group&gt;224.1.2.4
      interface&gt;eth1</literal></para>

      <para><literal>22:59:51:129574 JOIN group&gt;224.1.2.4 src&gt;25.25.25.1
      interface&gt;eth1</literal></para>
    </sect2>

    <sect2 id="_Log_File_LEAVE">
      <title>Log File LEAVE Events</title>

      <para>The format of log file LEAVE event lines is:</para>

      <para>&lt;eventTime&gt; LEAVE group&gt;&lt;groupAddress&gt; [src&gt;
      &lt;srcAddress&gt;] [interface&gt;&lt;interfaceName&gt;]</para>

      <para>The &lt;groupAddress&gt; is the IP multicast group address which
      was left. The format of this field is either a dotted decimal IPv4
      address or a colon-delimited IPv6 address. The &lt;interfaceName&gt; is
      given only when the executed MGEN script used the INTERFACE option in
      the corresponding <link linkend="_LEAVE">LEAVE</link> script
      event.</para>

      <para>Example LEAVE event log lines:<literal/></para>

      <para><literal>22:59:59:234757 LEAVE group&gt;224.1.2.3</literal></para>

      <para><literal>22:59:59:753683 LEAVE group&gt;224.1.2.4
      interface&gt;eth1</literal></para>

      <para><literal>22:59:59:753683 LEAVE group&gt;224.1.2.4
      src&gt;25.25.25.1 interface&gt;eth1</literal></para>
    </sect2>

    <sect2 id="_Log_File_LISTEN">
      <title>Log File LISTEN Events</title>

      <para>The format of the LISTEN event log file line is:<literal/></para>

      <para><literal>&lt;eventTime&gt; LISTEN proto&gt;&lt;protocol&gt;
      port&gt;&lt;portNumber&gt;</literal></para>

      <para>The &lt;protocol&gt; field corresponds to the transport protocol
      type being used. Supported protocols include "UDP" and "TCP". The
      &lt;portNumber&gt; field is the host port number to be monitored.</para>

      <para>Example LISTEN event log lines:<literal/></para>

      <para><literal>22:59:48:834205 LISTEN proto&gt;UDP
      port&gt;5000</literal></para>

      <para><literal>22:59:49:328039 LISTEN proto&gt;UDP
      port&gt;5001</literal></para>
    </sect2>

    <sect2 id="_Log_File_IGNORE">
      <title>Log File IGNORE Events</title>

      <para>The format of the IGNORE event log file line is:</para>

      <para><literal>&lt;eventTime&gt; IGNORE proto&gt;&lt;protocol&gt;
      port&gt;&lt;portNumber&gt;</literal></para>

      <para>The &lt;protocol&gt; field corresponds to the transport protocol
      type which was being used. Supported protocols include "UDP" and "TCP".
      The &lt;portNumber&gt; field is the host port number to be no longer
      monitored.</para>

      <para>Example IGNORE event log lines:<literal/></para>

      <para><literal>23:00:00:723467 IGNORE proto&gt;UDP
      port&gt;5000</literal></para>

      <para><literal>23:01:00:235629 IGNORE proto&gt;UDP
      port&gt;5001</literal></para>
    </sect2>

    <sect2 id="_Log_File_ON">
      <title>Log File ON Events</title>

      <para>The format of the ON event log file line is:<literal/></para>

      <para><literal>&lt;eventTime&gt; ON flow&gt;&lt;flowID&gt;
      srcPort&gt;&lt;srcPort&gt;
      dst&gt;&lt;dst&gt;/&lt;portNumber&gt;</literal></para>

      <para>This event indicates that mgen has attempted to establish a TCP
      connection with the target destination address and port or a UDP flow
      has begun transmitting. It does not indicate that the connection has
      been successfully established, only that a connection has been
      attempted. The &lt;flowID&gt; field corresponds to the TCP flow ID of
      the connection. The &lt;srcPort&gt; is either the OS provided or user
      specified src port for the flow. The &lt;dst&gt; field corresponds to
      the destination of the TCP connection. The &lt;portNumber&gt; field is
      the destination port number of the TCP connection.</para>

      <para>Example ON event log lines:</para>

      <para><literal>23:00:00:723467 ON flow&gt;1 srcPort&gt;4000
      dst&gt;10.0.0.1/5000</literal></para>
    </sect2>

    <sect2 id="_Log_File_CONNECT">
      <title>Log File CONNECT Events</title>

      <para>The &lt;protocol&gt; field corresponds to the transport protocol
      type which was being used. Supported protocols include "UDP" and
      "TCP".</para>

      <para>The format of the CONNECT event log file line is:</para>

      <para>&lt;eventTime&gt; CONNECT flow&gt;&lt;flowId&gt;
      srcPort&gt;&lt;srcPort&gt; dst&gt;&lt;dst&gt;/&lt;portNumber&gt;</para>

      <para>The &lt;src&gt; and &lt;dst&gt; fields correspond to the local
      source port and destination ip address/port of the TCP connection. The
      &lt;flowID&gt; is the transmitting flow id. If multiple flows are
      sharing the connection, CONNECT events will be logged for each
      flow.</para>

      <para>Example CONNECT event log line:<literal/></para>

      <para><literal>23:00:00:723467 CONNECT flow&gt;1 srcPort&gt;4000
      dst&gt;10.0.0.2/5000</literal></para>
    </sect2>

    <sect2 id="_Log_File_ACCEPT" remap="">
      <title>Log File ACCEPT Events</title>

      <para>The &lt;protocol&gt; field corresponds to the transport protocol
      type which was being used. Supported protocols include "UDP" and
      "TCP".</para>

      <para>The format of the ACCEPT event log file line is:</para>

      <para>&lt;eventTime&gt; ACCEPT srcPort&gt;&lt;srcAddr&gt;&lt;srcPort&gt;
      dstPort&gt;&lt;dstPort&gt;</para>

      <para>The &lt;src&gt; and &lt;dst&gt; fields correspond to the source ip
      address and port and local receiving(dst) port of the TCP
      connection.</para>

      <para>Example ACCEPT event log line (server):</para>

      <para>23:00:00:723467 ACCEPT srcPort&gt;4007 dst&gt;10.0.0.2/5000</para>
    </sect2>

    <sect2 id="_Log_File_SHUTDOWN" label="">
      <title>Log File SHUTDOWN Events</title>

      <para>The format of the SHUTDOWN event log file line is:</para>

      <para>&lt;eventTime&gt; SHUTDOWN flow&gt;&lt;flowID&gt;
      srcPort&gt;&lt;srcPort&gt; dst&gt;&lt;dstAddr&gt;&lt;dstPort&gt;
      (client)</para>

      <para>&lt;eventTime&gt; SHUTDOWN src&gt;&lt;srcAddr&gt;&lt;srcPort&gt;
      dstPort&gt;&lt;dstPort&gt; (server)</para>

      <para>This event indicates that a TCP connection with the dst indicated
      address and port was shutdown after a client OFF event or by the server
      after a server IGNORE event has been processed and client connections
      remain active on the dst port being listened to. In the TCP client's log
      file, the dst address and port reflect the address and port of the node
      the client was attempting to connect to. In the TCP server's log file,
      the src address and port reflects the address and port of the connecting
      node. The &lt;flowID&gt; field corresponds to the TCP flow ID of the
      connection (this field is only available in the client's event log).
      Note that if a TCP connection was prematurely terminated, no SHUTDOWN
      event will be logged.</para>

      <para>Example Client SHUTDOWN event log line (client):<literal/></para>

      <para><literal>23:00:00:723467 SHUTDOWN flow&gt;&lt;flowId&gt;
      src&gt;10.0.0.2/5000 dstPort&gt;6000</literal></para>

      <para>Example Server SHUTDOWN event log line (server):<literal/></para>

      <para><literal>23:00:00:723467 SHUTDOWN src&gt;10.0.0.1/5000
      dst&gt;6000</literal></para>

      <para>If multiple flows are sharing the same connection, the shutdown
      event will be logged only when the last flow has stopped sending to the
      socket pair. An "OFF" event will be logged for any connections ending
      while other flows are still transmitting, e.g.:</para>

      <para><literal>22:35:52.458531 OFF flow&gt;1 srcPort&gt;4000
      dst&gt;10.0.0.1/5000 </literal></para>

      <para><literal>22:35:52.458542 SEND proto&gt;TCP flow&gt;2 seq&gt;3
      srcPort&gt;4000 dst&gt;10.0.0.1/5000 size&gt;8192</literal></para>

      <para><literal>22:35:52.458598 SHUTDOWN flow&gt;2 srcPort&gt;4000
      dst&gt;10.0.0.1/5000 </literal></para>

      <para><literal>22:35:52.460419 OFF flow&gt;2 srcPort&gt;4000
      dst&gt;10.0.0.1/5000</literal></para>
    </sect2>

    <sect2 id="_Log_File_DISCONNECTED">
      <title>Log File DISCONNECT Events</title>

      <para>The format of the DISCONNECT event log file line is:</para>

      <para>&lt;eventTime&gt; DISCONNECT flow&gt;&lt;flowID&gt;
      srcPort&gt;&lt;srcPort&gt; dst&gt;&lt;dstAddr&gt;&lt;dstPort&gt;
      (client)</para>

      <para>&lt;eventTime&gt; DISCONNECT
      src&gt;&lt;srcAddr&lt;/&lt;srcPort&gt; dstPort&gt;&lt;dstPort&gt;
      (server)</para>

      <para>This event indicates that a TCP connection with the indicated
      address and port has disconnected either because the connection could
      not be established in the first place or because the connection was
      prematurely terminated. In the TCP client's log file, the dst address
      and port reflect the address and port of the node the client was
      attempting to connect to. In the TCP server's log file, the src address
      and port reflects the address and port of the connecting node. The
      &lt;flowID&gt; field corresponds to the TCP flow ID of the connection
      (this field is only available in the client's event log). Note that if a
      TCP connection was not prematurely terminated, no DISCONNECT event will
      be logged. (NOTE: Indication of unscheduled TCP disconnection is not
      available relieably under windows at this time.)</para>

      <para>Example Client DISCONNECT event log line:<literal/></para>

      <para><literal>23:00:00:723467 DISCONNECT flow&gt;1 srcPort&gt;4000
      dst&gt;10.0.0.2/5000</literal></para>

      <para>Example Server DISCONNECT event log line :<literal/></para>

      <para><literal>23:00:00:723467 DISCONNECT src&gt;10.0.0.1/4000
      dstPort&gt;5000</literal></para>
    </sect2>

    <sect2 id="_Log_File_OFF">
      <title>Log File OFF Events</title>

      <para>The format of the OFF event log file line is:</para>

      <para>&lt;eventTime&gt; OFF flow&gt; &lt;flowID&gt;
      srcPort&gt;&lt;srcPort&gt; dst&gt;&lt;dstAddr&gt;/&lt;dstPort&gt;
      (client)</para>

      <para>&lt;eventTime&gt; OFF src&gt;&lt;srcAddr&gt;&lt;srcPort&gt;
      dstPort&gt;&lt;dstPort&gt; (server)</para>

      <para>This event indicates that a TCP connection with the indicated
      address and port has been successfully shutdown (e.g. disconnected)
      after a scheduled mgen OFF event. In the TCP client's log file, the dst
      address and port reflect the address and port of the node the client was
      connected to. In the TCP server's log file, the src address and port
      reflects the address and port of the connecting node. The &lt;flowID&gt;
      field corresponds to the TCP flow ID of the connection (this field is
      only available in the client's event log). Note that if a TCP connection
      was prematurely terminated by either the client or the server, a
      DISCONNECT event will be logged instead of an OFF event. (NOTE: Under
      Windows operating systems, the DISCONNECT event is not reliable and the
      OFF event may be logged for both planned and unplanned socket
      disconnects.)</para>

      <para>Example Client OFF event log line (client):<literal/></para>

      <para><literal>23:00:00:723467 OFF flow&gt;1 srcPort&gt;4000
      dst&gt;10.0.0.2/5000</literal></para>

      <para>Example Server OFF event log line (server):<literal/></para>

      <para><literal>23:00:00:723467 OFF src&gt;10.0.0.1/4000
      dstPort&gt;5000</literal></para>

      <para>Note that the server will only log a single OFF event if multiple
      tcp flows are being recevied over the socket pair, although the client
      will log OFF events for each flow.</para>
    </sect2>

    <sect2 id="_Log_File_Start_Stop">
      <title>Log File START and STOP Events</title>

      <para>The format of the START and STOP event log file line
      is:<literal/></para>

      <para><literal>&lt;eventTime&gt;
      START</literal>or<literal>&lt;eventTime&gt;STOP</literal></para>

      <para>These log file lines indicate the time at which MGEN began and
      ended its operation. The "START" time corresponds to the relative time
      zero for any executed scripts. This "START" time is when the mgen
      program was executed unless the global <link
      linkend="_START">START</link> command was invoked. The "STOP" command
      corresponds to when the mgen program was halted.</para>
    </sect2>
  </sect1>

  <sect1 id="Binary_Log_File_Format">
    <title>Binary Log File Format</title>

    <para>At the beginning of binary log files, there is a plain text line to
    make it easy to tell what kind of file it is. It has the mgen version
    number, as well as the type of file ("binary_log"). This line is
    terminated with a line feed and a NULL ('\0') character. Following the
    NULL, the file contains a series of binary formatted records. There are
    several different types of records in the binary log file format. Each
    record consists of a number of fields. The first single-byte field
    indicates the record type. A record type of 0 is considered invalid. All
    multiple-byte fields are in standard network byte order (i.e. most
    significant byte first). Each record in the binary log file corresponds to
    a single unique Mgen event, just as each line in the text-based log file
    does. Each binary log file record contains the same information that every
    line of the text-format log file has. The text-format log file can
    actually be recreated from a binary log file using the "convert" command
    of mgen.</para>

    <sect2 id="_Binary_Log_File_RECV_Events">
      <title>Binary Log File RECV Events</title>

      <para>The format of the RECV event binary log file record is:</para>

      <programlisting>
The format of the RECV event binary log file record is:

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    type = 1   |   protocol    |       eventRecordLength       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       eventTimeSeconds                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     eventTimeMicroseconds                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            srcPort            |  srcAddrType  |  srcAddrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          srcAddr ...                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          messageSize          |    version    |    flags      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          mgenFlowId                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        sequenceNumber                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         txTimeSeconds                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       txTimeMicroseconds                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            dstPort            |  dstAddrType  |  dstAddrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          dstAddr ...                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           hostPort            | hostAddrType  | hostAddrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         hostAddr ...                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            latitude                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           longitude                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            altitude                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   gpsStatus   |  reserved   |           payloadLen            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          payload ...                          |
</programlisting>

      <para>The &lt;type&gt; field contains the record type. The record type
      for RECV events is 1. For backwards compatibility, unknown record types
      are skipped by the binary to text log file conversion function. The
      &lt;protocol&gt; field indicates the protocol of the message UDP
      &lt;1&gt;, TCP &lt;2&gt;, or SINK &lt;3&gt;. &lt;0&gt; indicates an
      invalid protocol.</para>

      <para>The &lt;eventRecordLength&gt; field contains the length of this
      record, starting with the next byte. Thus, it contains the length of the
      entire record, less what will have already been read when this two-byte
      number is obtained.</para>

      <para>The &lt;srcPort&gt; field contains the port number that the
      message was sent from. The &lt;srcAddrType&gt; field indicates the type
      of the source. Possible types and values include:</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>INVALID_ADDRESS</entry>

              <entry>0</entry>
            </row>

            <row>
              <entry>IPv4</entry>

              <entry>1</entry>
            </row>

            <row>
              <entry>IPv6</entry>

              <entry>2</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The &lt;srcAddrLen&gt; field indicates the length in bytes of
      source address field &lt;srcAddr&gt; to follow. The length should be 0
      (zero) for the INVALID_ADDRESS type, 4 for IPv4 addresses, and 16 for
      IPv6 addresses.</para>

      <para>The &lt;srcAddr&gt; contains the address to which the MGEN message
      was sent from. The address is in network byte order.</para>

      <para>The rest of the packet is just a copy of the message payload from
      the original packet. For details on these fields, please look <link
      linkend="_MGEN_Message_Payload">here</link>.</para>
    </sect2>

    <sect2 id="Binary_Log_File_TCP_Connection_Event">
      <title>Binary Log File TCP Connection Events</title>

      <para>The format of the TCP connection event binary log file records
      is:</para>

      <programlisting>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    type = 1   |   protocol    |       eventRecordLength       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       eventTimeSeconds                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     eventTimeMicroseconds                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       srcPort/dstPort         |   addrType    |     addrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       srcAddr/dstAddr ...                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       srcPort/DstPort         |           flowID              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      (flowID cont.)           |   addrLen     |    hostAddr   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  (host addr cont)             |       
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</programlisting>

      <para>The &lt;type&gt; field contains the record type. The record type
      for TCP corresponds to the tcp event type (ON, CONNECT, DISCONNECT,
      OFF). The &lt;protocol&gt; field indicates the protocol of the message
      TCP &lt;2&gt;. &lt;0&gt; indicates an invalid protocol.</para>

      <para>The &lt;eventRecordLength&gt; field contains the length of this
      record, starting with the next byte. Thus, it contains the length of the
      entire record, less what will have already been read when this two-byte
      number is obtained.</para>

      <para>The &lt;flowID&gt; field indicates whether the event is a client
      or server event. A flowID indicates that the event is a TCP client
      event. A &lt;0&gt; flowID indicates that the event is a TCP server
      event. The &lt;port&gt; field contains the port number that the message
      was sent to/from. The &lt;addrType&gt; field indicates the type of the
      address. Possible types and values include:</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>INVALID_ADDRESS</entry>

              <entry>0</entry>
            </row>

            <row>
              <entry>IPv4</entry>

              <entry>1</entry>
            </row>

            <row>
              <entry>IPv6</entry>

              <entry>2</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The &lt;addrLen&gt; field indicates the length in bytes of source
      address field &lt;addr&gt; to follow. The length should be 0 (zero) for
      the INVALID_ADDRESS type, 4 for IPv4 addresses, and 16 for IPv6
      addresses.</para>

      <para>The &lt;addr&gt; contains the address to which the MGEN message
      was sent to/from. The address is in network byte order.</para>

      <para>The &lt;flowID&gt; indicates the flow id of the tcp connection on
      the server side only. Host address fields are included if
      available.</para>
    </sect2>

    <sect2 id="Binary_Log_File_RERR_Events">
      <title>Binary Log File RERR Events</title>

      <para>The format of the RERR (receive error) event binary log file
      record is:</para>

      <programlisting>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    type = 1   |   protocol    |       eventRecordLength       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       eventTimeSeconds                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     eventTimeMicroseconds                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            srcPort            |  srcAddrType  |  srcAddrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          srcAddr ...                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          errorType                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</programlisting>

      <para>The &lt;type&gt; field contains the record type. The record type
      for RECV events is 1. For backwards compatibility, unknown record types
      are skipped by the binary to text log file conversion function. The
      &lt;protocol&gt; field indicates the protocol of the message UDP
      &lt;1&gt;, TCP &lt;2&gt;, or SINK &lt;3&gt;. &lt;0&gt; indicates an
      invalid protocol.</para>

      <para>The &lt;eventRecordLength&gt; field contains the length of this
      record, starting with the next byte. Thus, it contains the length of the
      entire record, less what will have already been read when this two-byte
      number is obtained.</para>

      <para>The &lt;srcPort&gt; field contains the port number that the
      message was sent from. The &lt;srcAddrType&gt; field indicates the type
      of the source Possible types and values include:</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>INVALID_ADDRESS</entry>

              <entry>0</entry>
            </row>

            <row>
              <entry>IPv4</entry>

              <entry>1</entry>
            </row>

            <row>
              <entry>IPv6</entry>

              <entry>2</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The &lt;srcAddrLen&gt; field indicates the length in bytes of
      source address field &lt;srcAddr&gt; to follow. The length should be 0
      (zero) for the INVALID_ADDRESS type, 4 for IPv4 addresses, and 16 for
      IPv6 addresses.</para>

      <para>The &lt;srcAddr&gt; contains the address to which the MGEN message
      was sent from. The address is in network byte order.</para>

      <para>The &lt;errorType&gt; indicates the type of message error detected
      and is one of the following possible error type values:</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>No error</entry>

              <entry>0</entry>
            </row>

            <row>
              <entry>Version number mismatch</entry>

              <entry>1</entry>
            </row>

            <row>
              <entry>Checksum validation failure</entry>

              <entry>2</entry>
            </row>

            <row>
              <entry>Message length error</entry>

              <entry>3</entry>
            </row>

            <row>
              <entry>Destination address invalid</entry>

              <entry>4</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="Binary_Log_File_SEND_Events">
      <title>Binary Log File SEND Events</title>

      <para>SEND events are only logged if transmit logging has been turned on
      with the "txlog" option. The format of the SEND event binary log file
      record is:</para>

      <programlisting>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    type = 2   |   protocol    |       eventRecordLength       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        TCP message size                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          messageSize          |    version    |    flags      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          mgenFlowId                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        sequenceNumber                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         txTimeSeconds                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       txTimeMicroseconds                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            dstPort            |  dstAddrType  |  dstAddrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          dstAddr ...                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           hostPort            | hostAddrType  | hostAddrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         hostAddr ...                          |
</programlisting>

      <para>These fields are the same ones that are used in the <link
      linkend="_Binary_Log_File_RECV_Events">RECV</link> events. The
      &lt;type&gt; for SEND events is 2. The &lt;protocol&gt; field indicates
      the protocol of the message UDP &lt;1&gt;, TCP &lt;2&gt;, or SINK
      &lt;3&gt;. &lt;0&gt; indicates an invalid protocol. Immediately
      following the &lt;eventRecordLength&gt; is a copy of the original
      message payload, without the GPS data and payload. The event time is
      left out, since it is the same as the transmit time. TCP message size
      will only exist for TCP protocol send events.</para>
    </sect2>

    <sect2 id="Binary_Log_File_LISTEN_IGNORE_Event">
      <title>Binary Log File LISTEN/IGNORE Events</title>

      <para>LISTEN and IGNORE events both have the same format:</para>

      <programlisting>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  type = 3/4   |   protocol    |       eventRecordLength       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       eventTimeSeconds                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     eventTimeMicroseconds                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   protocol    |   reserved    |          portNumber           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</programlisting>

      <para>LISTEN events have a &lt;type&gt; of 3, while IGNORE events have a
      &lt;type&gt; of 4. The &lt;protocol&gt; field contains the transport
      protocol type to LISTEN for, while the &lt;portNumber&gt; field tells us
      what port number to LISTEN on. Possible types and values for the
      &lt;protocol&gt; include:</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>INVALID_PROTOCOL</entry>

              <entry>0</entry>
            </row>

            <row>
              <entry>UDP</entry>

              <entry>1</entry>
            </row>

            <row>
              <entry>TCP</entry>

              <entry>2</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2 id="Binary_Log_File_JOIN_LEAVE_Event">
      <title>Binary Log File JOIN/LEAVE Events</title>

      <para>JOIN and LEAVE events also have an identical format:</para>

      <programlisting>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  type = 5/6   |   reserved    |       eventRecordLength       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       eventTimeSeconds                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     eventTimeMicroseconds                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           groupPort           | groupAddrType | groupAddrLen  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         groupAddr ...                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| ifaceNameLen  |             asciiInterfaceName ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     asciiInterfaceName ...                    |]
</programlisting>

      <para>JOIN events are of &lt;type&gt; 5, and LEAVE events have a
      &lt;type&gt; of 6. The &lt;groupPort&gt; is the port which will be used
      to JOIN/LEAVE the group. The &lt;groupAddrType&gt;,
      &lt;groupAddrLen&gt;, and &lt;groupAddr&gt; are the type, length, and
      raw value of the group address, similar to those of addresses in other
      record types. The ifaceNameLen field contains the length in bytes of the
      &lt;asciiInterfaceName&gt; that follows it.</para>
    </sect2>

    <sect2 id="Binary_Log_File_START_STOP_Event">
      <title>Binary Log File START/STOP Events</title>

      <para>START and STOP events both have the same format:</para>

      <programlisting>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  type = 7/8   |   reserved    |       eventRecordLength       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       eventTimeSeconds                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     eventTimeMicroseconds                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

</programlisting>

      <para>START events have a &lt;type&gt; 7, while STOP events are of
      &lt;type&gt; 8. They contain only the time the event occurred.</para>
    </sect2>
  </sect1>

  <sect1 id="_MGEN_Message_Payload">
    <title>MGEN Message Payload</title>

    <para>Note that the Version 5.0 message format is slightly different than
    that of MGEN Version 4.0. The MGEN message payload is in the following
    format:</para>

    <programlisting>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          messageSize          |    version    |    flags      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          mgenFlowId                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        sequenceNumber                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         txTimeSeconds                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       txTimeMicroseconds                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            dstPort            |  dstAddrType  |  dstAddrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          dstAddr ...                          |
                                                                
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           hostPort            | hostAddrType  | hostAddrLen   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         hostAddr ...                          |
                                                                 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            latitude                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           longitude                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            altitude                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   gpsStatus   |  reserved   |           payloadLen            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          payload ...                          |
                                                                 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          padding ...                          |
                                                                 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          checksum                             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</programlisting>

    <para>All multiple-byte fields are in standard network byte order (i.e.
    most significant byte first).</para>

    <para>The &lt;messageSize&gt; field indicates the total size (including
    the &lt;messageSize&gt;, &lt;version&gt;, &lt;flags&gt;, etc fields) of
    the MGEN message in bytes. The current UDP-only transport limits this to a
    maximum of 8192 bytes. In the future, larger message sizes will be
    supported and in conjunction with the &lt;flags&gt; field, very large
    messages will be supported as a concatenation of MGEN messages to support
    emulation of large file transfers, etc.</para>

    <para>The &lt;version&gt; field is the MGEN message protocol version
    number. This will enable future versions of MGEN to b backwards compatible
    and prevent older versions of MGEN from attempting to parse packets in
    unknown format.</para>

    <para>Currently a single &lt;flags&gt; value (CHECKSUM = 0x01) is defined.
    When this flag is set, it indicates the presence of the &lt;checksum&gt;
    field at the end of the MGEN message. It is expected that additional flags
    will be useful as MGEN adds support for transport types besides
    UDP.</para>

    <para>The &lt;mgenFlowId&gt; contains the flow/thread identification value
    associated with the MGEN flow in the corresponding script which created
    the flow. Note that each flow identified from an MGEN source has its own
    sequence number space.</para>

    <para>The &lt;sequenceNumber&gt; contains the 32-bit sequence number which
    is incremented with each message generated for an MGEN flow. This will
    wrap to zero when the maximum is reached.</para>

    <para>The &lt;txTimeSeconds&gt; and &lt;txTimeMicroseconds&gt; fields are
    used to mark the time of transmission of the MGEN message. The time is the
    source computer's system time in Greenwich Mean Time (GMT).</para>

    <para>The &lt;dstPort&gt; is the destination port number to which the MGEN
    message addressed by the source.</para>

    <para>The &lt;dstAddrType&gt; field indicates the type of destination
    address encapsulated in following fields. Possible types and values
    include:</para>

    <informaltable>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>INVALID_ADDRESS</entry>

            <entry>0</entry>
          </row>

          <row>
            <entry>IPv4</entry>

            <entry>1</entry>
          </row>

          <row>
            <entry>IPv6</entry>

            <entry>2</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The &lt;dstAddrLen&gt; field indicates the length in bytes of the
    destination address field &lt;dstAddr&gt; to follow. The length should be
    0 (zero) for the INVALID_ADDRESS type, 4 for IPv4 addresses, and 16 for
    IPv6 addresses.</para>

    <para>The &lt;dstAddr&gt; contains the destination address to which the
    source addressed the MGEN message. The address is in network byte
    order.</para>

    <para>Note that the following fields are optional and the MGEN message
    length my be truncated at any point after here. Any incomplete optional
    fields are considered invalid.</para>

    <para>The &lt;hostPort&gt; and &lt;hostAddr&gt; (if present and valid)
    contain the MGEN message source's default local address. Note that this
    may be different from the source address contained in the MGEN log file
    due to firewalls, Network Address Translation (NAT) devices, multi-homed
    sources, etc.</para>

    <para>The &lt;hostPort&gt; is the destination port number to which the
    MGEN message was addressed by the source.</para>

    <para>The &lt;hostAddrType&gt; field indicates the type of destination
    address encapsulated in following fields. The possible values are the same
    as for the &lt;dstAddrType&gt; described above.</para>

    <para>The &lt;hostAddrLen&gt; field indicates the length in bytes of the
    destination address field &lt;hostAddr&gt; to follow.</para>

    <para>The &lt;hostAddr&gt; contains the source's perception of its local
    default network address. In mgen, this is determined by a system call to
    <literal>gethostname()</literal>, followed by a call to name resolution.
    This address may be incorrect if the host is not correctly configured or
    domain name service (DNS) is unavailable.</para>

    <para>The &lt;latitude&gt;, &lt;longitude&gt;, and &lt;altitude&gt; fields
    contain values corresponding to GPS information for the MGEN source if it
    was available. The &lt;latitude&gt; and &lt;longitude&gt; fields are
    encoded as follows:</para>

    <para>&lt;fieldValue&gt; = (unsigned
    long)((&lt;actualValue&gt;+180.0)*60000.0)</para>

    <para>The &lt;altitude&gt; field is the direct representation of the
    altitude value available from the source's GPS system.</para>

    <para>The &lt;gpsStatus&gt; indicates the validity of the GPS information
    which was encoded. Possible status types and values currently
    include:</para>

    <informaltable>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>INVALID_GPS</entry>

            <entry>0</entry>
          </row>

          <row>
            <entry>STALE</entry>

            <entry>1</entry>
          </row>

          <row>
            <entry>CURRENT</entry>

            <entry>2</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>In addition to the &lt;gpsStatus&gt; field, actual values of 999.0
    for latitude and longitude, and ?999 for altitude also correspond to
    invalid values.</para>

    <para>The &lt;payloadLen&gt; field, when of non-zero value, indicates the
    presence of optional user-defined content in the MGEN message. The
    &lt;payloadLen&gt; value indicates the quantity (in bytes) of user-defined
    content which follows.</para>

    <para>The &lt;payload&gt; field contains the user-defined content and is
    of length &lt;payloadLen&gt; bytes. Note that a short MGEN
    &lt;messageSize&gt; could truncate this field. If the MGEN user provides
    the optional user-defined content, it is up to the user to ensure that the
    generated MGEN messages are of sufficient size as not to truncate the
    &lt;payload&gt; content.</para>

    <para>The &lt;padding&gt; portion of MGEN messages contain undefined data
    content.</para>

    <para>The &lt;checksum&gt; field is optional and is present when the
    CHECKSUM (0x01) flag is set in the &lt;flags&gt; field. Note that
    corrupted messages may result in MGEN messages with the &lt;flags&gt;
    field itself corrupted, so it may be useful for MGEN implementations to
    have an option to validate checksums even when the CHECKSUM flag is not
    set if it is known that the sender is providing checksum content.</para>

    <para>Note: The total size of the MGEN message is defined by the
    &lt;messageSize&gt; field. The optional fields may be truncated if the
    &lt;messageSize&gt; is small. The minimum MGEN message size will depend
    upon the IP address types being used. For example, the minimum allowed
    MGEN message size using IPv4 addresses with no optional fields is 28 bytes
    (i.e. for UDP, the UDP payload size would be 28 bytes). If GPS information
    is to be included without truncation, the minimum message size becomes 52
    bytes with the inclusion of the &lt;hostAddr&gt; and GPS information. For
    IPv6 destination addresses, the minimum allowed MGEN message size is 40
    bytes with no optional fields. If GPS information is included the minimum
    message size with truncating information is 76 bytes.</para>
  </sect1>

  <sect1>
    <title>Compile options</title>

    <para/>

    <sect2>
      <title>RANDOM_FILL</title>

      <para>Adding the RANDOM_FILL compile time option will cause MGEN to fill
      the payload with random content. Otherwise, the payload will be zero
      filled. (Alternatively, the DATA option may be used).</para>
    </sect2>

    <sect2>
      <title>HAVE_IPV6</title>

      <para>The HAVE_IPV6 compile time option indicates that the system is
      IPV6 capable. IPV6 packets will be generated.</para>
    </sect2>

    <sect2>
      <title>SIMULATE</title>

      <para>The SIMULATE compile time option indicates that MGEN will be
      running in a simulation environment.</para>
    </sect2>

    <sect2>
      <title>HAVE_GPS</title>

      <para>The HAVE_GPS compile time option indicates that a GPS service is
      available. GPS information will be put into the MGEN message
      payload.</para>
    </sect2>

    <sect2>
      <title>HAVE_PCAP</title>

      <para>The HAVE_PCAP compile time option indicates that the system has
      PCAP installed. This option should be used when MGEN will be "cloning" a
      TCPDUMP file.</para>
    </sect2>

    <sect2>
      <title>Other</title>

      <para>Operating system compile time options include UNIX, _WIN32_WCE,
      WIN32, LINUX, MACOSX. These should be set as appropriate to the
      operation system type. UNICODE log file output may be specified for
      WIN32 operating systems. On Solaris (and possibly other Unix) operating
      systems, the IP_MAX_MEMBERSHIPS option will set the IP_MAX_MEMBERSHIP
      limit per socket to -1 as no pre-defined limit is set in the OS.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Known issues</title>

    <para/>

    <sect2>
      <title>Macosx Windows TCP Interaction</title>

      <para>There is a negative interaction between Nagle's TCP Algorithm and
      Delayed ACK that causes a TCP performance delay between traffic flowing
      from some Windows OSs to macosx. This can be alleviated somewhat by
      setting the sysctl net.inet.tcp.delayed_ack value to 1 (always employ
      delayed ack, 6 packets can get 1 ack) although performance may still be
      still be impacted. Windows-7 is impacted more than Vista. The phenomenon
      varies by traffic pattern.</para>
    </sect2>

    <sect2>
      <title>Windows Buffer Sizes</title>

      <para>As windows default buffer size 8192K it is recommended that
      adequate rx/tx buffers be set for UDP traffic via the TXBUFFER and
      RXBUFFER global or flow commands so UDP performance is not
      degraded.</para>

      <para/>
    </sect2>
  </sect1>
</article>
